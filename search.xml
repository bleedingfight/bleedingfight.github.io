<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rust三方库(并发)</title>
      <link href="/2023/09/17/rust-san-fang-ku-bing-fa/"/>
      <url>/2023/09/17/rust-san-fang-ku-bing-fa/</url>
      
        <content type="html"><![CDATA[<p>#</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust三方库-actix-协议</title>
      <link href="/2023/09/16/rust-san-fang-ku-actix-xie-yi/"/>
      <url>/2023/09/16/rust-san-fang-ku-actix-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><h2 id="Websockets"><a href="#Websockets" class="headerlink" title="Websockets"></a>Websockets</h2><p>actix web通过actix-web-actor支持websocket，转换请求的Payload到ws::Message然后使用流接合器处理实际的消息，但是对于处理websocket和http actor太简单了。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Actor<span class="token punctuation">,</span> StreamHandler<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> actix_web_actors<span class="token punctuation">:</span><span class="token punctuation">:</span>ws<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// Define HTTP actor</span><span class="token keyword">struct</span> MyWs<span class="token punctuation">;</span><span class="token keyword">impl</span> Actor <span class="token keyword">for</span> MyWs <span class="token punctuation">{</span>    <span class="token keyword">type</span> Context <span class="token operator">=</span> ws<span class="token punctuation">:</span><span class="token punctuation">:</span>WebsocketContext<span class="token operator">&lt;</span>Self<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// Handler for ws::Message message</span><span class="token keyword">impl</span> StreamHandler<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>ws<span class="token punctuation">:</span><span class="token punctuation">:</span>Message<span class="token punctuation">,</span> ws<span class="token punctuation">:</span><span class="token punctuation">:</span>ProtocolError<span class="token operator">>></span> <span class="token keyword">for</span> MyWs <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> Result<span class="token operator">&lt;</span>ws<span class="token punctuation">:</span><span class="token punctuation">:</span>Message<span class="token punctuation">,</span> ws<span class="token punctuation">:</span><span class="token punctuation">:</span>ProtocolError<span class="token operator">></span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> Self<span class="token punctuation">:</span><span class="token punctuation">:</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">match</span> msg <span class="token punctuation">{</span>            <span class="token function">Ok</span><span class="token punctuation">(</span>ws<span class="token punctuation">:</span><span class="token punctuation">:</span>Message<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ping</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ctx<span class="token punctuation">.</span><span class="token function">pong</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Ok</span><span class="token punctuation">(</span>ws<span class="token punctuation">:</span><span class="token punctuation">:</span>Message<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ctx<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Ok</span><span class="token punctuation">(</span>ws<span class="token punctuation">:</span><span class="token punctuation">:</span>Message<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Binary</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> ctx<span class="token punctuation">.</span><span class="token function">binary</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">,</span>            _ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">,</span> stream<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Payload<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>HttpResponse<span class="token punctuation">,</span> Error<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> resp <span class="token operator">=</span> ws<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">start</span><span class="token punctuation">(</span>MyWs <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/ws/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果可能actix-web自动更新连接到HTTP/2。</p><h2 id="协商"><a href="#协商" class="headerlink" title="协商"></a>协商</h2><p>无论是<code>rustls</code>还是<code>openssl</code>特性开启，HttpServer提供了bind_restls方法和bind_openssl方法。</p><pre class="line-numbers language-toml"><code class="language-toml">[dependencies]actix-web = { version = "4", features = ["openssl"] }openssl = { version = "0.10", features = ["v110"] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Responder<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> openssl<span class="token punctuation">:</span><span class="token punctuation">:</span>ssl<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>SslAcceptor<span class="token punctuation">,</span> SslFiletype<span class="token punctuation">,</span> SslMethod<span class="token punctuation">}</span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>_req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> Responder <span class="token punctuation">{</span>    <span class="token string">"Hello."</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// load TLS keys</span>    <span class="token comment" spellcheck="true">// to create a self-signed temporary cert for testing:</span>    <span class="token comment" spellcheck="true">// `openssl req -x509 -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem -days 365 -subj '/CN=localhost'`</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> builder <span class="token operator">=</span> SslAcceptor<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">mozilla_intermediate</span><span class="token punctuation">(</span>SslMethod<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">tls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder        <span class="token punctuation">.</span><span class="token function">set_private_key_file</span><span class="token punctuation">(</span><span class="token string">"key.pem"</span><span class="token punctuation">,</span> SslFiletype<span class="token punctuation">:</span><span class="token punctuation">:</span>PEM<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">set_certificate_chain_file</span><span class="token punctuation">(</span><span class="token string">"cert.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind_openssl</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">,</span> builder<span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>升级到HTTPS/2如<a href="https://httpwg.org/specs/rfc7540.html#rfc.section.3.2" target="_blank" rel="noopener">RFC7540</a>不支持。HTTP/2支持cleartex和TLS连接。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust三方库-actix-进阶</title>
      <link href="/2023/09/16/rust-san-fang-ku-actix-jin-jie/"/>
      <url>/2023/09/16/rust-san-fang-ku-actix-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>Actix Web 使用自己的<code>actix_web::error::Error</code>类型和<code>actix_web::error::ResponseError</code> trait 来处理来自 Web handler的错误。如果处理程序在也实现了<code>ResponseError</code> trait则返回一个Error（指一般 Rust 特征std::error::Error），Actix Web 会将该错误呈现为 HTTP 响应及其相应的<code>actix_web::http::StatusCode</code>. 默认情况下会生成内部服务器错误：<code>ResultResponseError</code>和<code>actix_web::http::StatusCode</code>。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> ResponseError <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function">error_response</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Response<span class="token operator">&lt;</span>Body<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">status_code</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> StatusCode<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个Responder将兼容的Results 强制转换为 HTTP 响应：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span>T<span class="token punctuation">:</span> Responder<span class="token punctuation">,</span> E<span class="token punctuation">:</span> Into<span class="token operator">&lt;</span>Error<span class="token operator">>></span> Responder <span class="token keyword">for</span> Result<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Error上面的代码中是actix-web的错误定义，任何实现的错误都<code>ResponseError</code>可以自动转换为错误。Actix Web 提供了ResponseError一些常见非 Actix 错误的实现。例如，如果处理程序响应io::Error，则该错误将转换为<code>HttpInternalServerError</code>：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">;</span><span class="token keyword">use</span> actix_files<span class="token punctuation">:</span><span class="token punctuation">:</span>NamedFile<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>\_req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span>NamedFile<span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">Ok</span><span class="token punctuation">(</span>NamedFile<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"static/index.html"</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h2><p>下面示例实现ResponseError，使用derive_more板条箱进行声明性错误枚举。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>error<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> derive_more<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Display<span class="token punctuation">,</span> Error<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Debug<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> Error<span class="token punctuation">)</span><span class="token punctuation">]</span> #<span class="token punctuation">[</span><span class="token function">display</span><span class="token punctuation">(</span>fmt <span class="token operator">=</span> <span class="token string">"my error: {}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">struct</span> MyError <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Use default implementation for `error_response()` method</span><span class="token keyword">impl</span> error<span class="token punctuation">:</span><span class="token punctuation">:</span>ResponseError <span class="token keyword">for</span> MyError <span class="token punctuation">{</span><span class="token punctuation">}</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span><span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span> MyError<span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">Err</span><span class="token punctuation">(</span>MyError <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"test"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ResponseError有一个默认实现，<code>error_response()</code>将呈现500（内部服务器错误），这就是index上面执行处理程序时会发生的情况。覆盖error_response()以产生更有用的结果：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>error<span class="token punctuation">,</span> get<span class="token punctuation">,</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentType<span class="token punctuation">,</span> StatusCode<span class="token punctuation">}</span><span class="token punctuation">,</span>App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> derive_more<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Display<span class="token punctuation">,</span> Error<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Debug<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> Error<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">enum</span> MyError <span class="token punctuation">{</span> #<span class="token punctuation">[</span><span class="token function">display</span><span class="token punctuation">(</span>fmt <span class="token operator">=</span> <span class="token string">"internal error"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>InternalError<span class="token punctuation">,</span>    #<span class="token punctuation">[</span><span class="token function">display</span><span class="token punctuation">(</span>fmt <span class="token operator">=</span> <span class="token string">"bad request"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    BadClientData<span class="token punctuation">,</span>    #<span class="token punctuation">[</span><span class="token function">display</span><span class="token punctuation">(</span>fmt <span class="token operator">=</span> <span class="token string">"timeout"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    Timeout<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> error<span class="token punctuation">:</span><span class="token punctuation">:</span>ResponseError <span class="token keyword">for</span> MyError <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function">error_response</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">status_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">status_code</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> StatusCode <span class="token punctuation">{</span>        <span class="token keyword">match</span> <span class="token operator">*</span><span class="token keyword">self</span> <span class="token punctuation">{</span>            MyError<span class="token punctuation">:</span><span class="token punctuation">:</span>InternalError <span class="token operator">=</span><span class="token operator">></span> StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>INTERNAL_SERVER_ERROR<span class="token punctuation">,</span>            MyError<span class="token punctuation">:</span><span class="token punctuation">:</span>BadClientData <span class="token operator">=</span><span class="token operator">></span> StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>BAD_REQUEST<span class="token punctuation">,</span>            MyError<span class="token punctuation">:</span><span class="token punctuation">:</span>Timeout <span class="token operator">=</span><span class="token operator">></span> StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>GATEWAY_TIMEOUT<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span><span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span> MyError<span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">Err</span><span class="token punctuation">(</span>MyError<span class="token punctuation">:</span><span class="token punctuation">:</span>BadClientData<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误-1"><a href="#错误-1" class="headerlink" title="错误"></a>错误</h2><p>Actix Web 提供了一组错误帮助函数，可用于从其他错误生成特定的 HTTP 错误代码。在这里，我们使用MyError以下方法将未实现该<code>ResponseError</code> trait的 转换为400（错误请求）map_err：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>error<span class="token punctuation">,</span> get<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Debug<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">struct</span> MyError <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span><span class="token punctuation">}</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Err</span><span class="token punctuation">(</span>MyError <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"test error"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token operator">|</span>err<span class="token operator">|</span> error<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ErrorBadRequest</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关可用错误帮助程序的完整列表，请参阅actix-weberror模块的 API 文档。</p><h2 id="错误-2"><a href="#错误-2" class="headerlink" title="错误"></a>错误</h2><p>Actix 在日志级别记录所有错误WARN。如果应用程序的日志级别设置为DEBUG并RUST_BACKTRACE启用，则还会记录回溯。这些可以通过环境变量进行配置：</p><blockquote><p>RUST_BACKTRACE=1 RUST_LOG=actix_web=debug cargo run</p></blockquote><p>该Error类型使用原因的错误回溯（如果可用）。如果底层故障不提供回溯，则会构造一个新的回溯，指向发生转换的点（而不是错误的起源）。</p><h2 id="错误-3"><a href="#错误-3" class="headerlink" title="错误"></a>错误</h2><p>考虑将应用程序产生的错误分为两大类可能会很有用：那些旨在面向用户的错误和那些不面向用户的错误。</p><p>前者的一个例子是，我可能会使用 failure 来指定一个UserError枚举，该枚举封装了 aValidationError以在用户发送错误输入时返回：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>error<span class="token punctuation">,</span> get<span class="token punctuation">,</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentType<span class="token punctuation">,</span> StatusCode<span class="token punctuation">}</span><span class="token punctuation">,</span>App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> derive_more<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Display<span class="token punctuation">,</span> Error<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Debug<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> Error<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">enum</span> UserError <span class="token punctuation">{</span> #<span class="token punctuation">[</span><span class="token function">display</span><span class="token punctuation">(</span>fmt <span class="token operator">=</span> <span class="token string">"Validation error on field: {}"</span><span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">]</span>ValidationError <span class="token punctuation">{</span> field<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> error<span class="token punctuation">:</span><span class="token punctuation">:</span>ResponseError <span class="token keyword">for</span> UserError <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function">error_response</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">status_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">status_code</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> StatusCode <span class="token punctuation">{</span><span class="token keyword">match</span> \<span class="token operator">*</span><span class="token keyword">self</span> <span class="token punctuation">{</span>UserError<span class="token punctuation">:</span><span class="token punctuation">:</span>ValidationError <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">></span> StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>BAD_REQUEST<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将完全按照预期运行，因为用 定义的错误消息display是按照明确的意图写入的，以供用户读取。然而，发回错误消息并不适合所有错误——在服务器环境中会发生许多故障，我们可能希望对用户隐藏具体信息。例如，如果数据库出现故障并且客户端库开始产生连接超时错误，或者 HTML 模板格式不正确且呈现时出现错误。在这些情况下，最好将错误映射到适合用户使用的通用错误。InternalError下面是一个使用自定义消息将内部错误映射到面向用户的示例：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>error<span class="token punctuation">,</span> get<span class="token punctuation">,</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentType<span class="token punctuation">,</span> StatusCode<span class="token punctuation">}</span><span class="token punctuation">,</span>App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> derive_more<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Display<span class="token punctuation">,</span> Error<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Debug<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> Error<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">enum</span> UserError <span class="token punctuation">{</span> #<span class="token punctuation">[</span><span class="token function">display</span><span class="token punctuation">(</span>fmt <span class="token operator">=</span> <span class="token string">"An internal error occurred. Please try again later."</span><span class="token punctuation">)</span><span class="token punctuation">]</span>InternalError<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> error<span class="token punctuation">:</span><span class="token punctuation">:</span>ResponseError <span class="token keyword">for</span> UserError <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function">error_response</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">status_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">fn</span> <span class="token function">status_code</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> StatusCode <span class="token punctuation">{</span>        <span class="token keyword">match</span> <span class="token operator">*</span><span class="token keyword">self</span> <span class="token punctuation">{</span>            UserError<span class="token punctuation">:</span><span class="token punctuation">:</span>InternalError <span class="token operator">=</span><span class="token operator">></span> StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>INTERNAL_SERVER_ERROR<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span><span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span> UserError<span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">do_thing_that_fails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token operator">|</span>\_e<span class="token operator">|</span> UserError<span class="token punctuation">:</span><span class="token punctuation">:</span>InternalError<span class="token punctuation">)</span>?<span class="token punctuation">;</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">"success!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过将错误分为面向用户的错误和不面向用户的错误，我们可以确保不会意外地将用户暴露于应用程序内部抛出的他们不希望看到的错误。</p><h3 id="错误-4"><a href="#错误-4" class="headerlink" title="错误"></a>错误</h3><p>这是一个基本示例，使用<code>middleware::Logger</code>它取决于env_logger和log：</p><pre class="line-numbers language-toml"><code class="language-toml">[dependencies]env_logger = "0.8"log = "0.4"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>error<span class="token punctuation">,</span> get<span class="token punctuation">,</span> middleware<span class="token punctuation">:</span><span class="token punctuation">:</span>Logger<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> derive_more<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Display<span class="token punctuation">,</span> Error<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> log<span class="token punctuation">:</span><span class="token punctuation">:</span>info<span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Debug<span class="token punctuation">,</span> Display<span class="token punctuation">,</span> Error<span class="token punctuation">)</span><span class="token punctuation">]</span> #<span class="token punctuation">[</span><span class="token function">display</span><span class="token punctuation">(</span>fmt <span class="token operator">=</span> <span class="token string">"my error: {}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> MyError <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Use default implementation for `error_response()` method</span><span class="token keyword">impl</span> error<span class="token punctuation">:</span><span class="token punctuation">:</span>ResponseError <span class="token keyword">for</span> MyError <span class="token punctuation">{</span><span class="token punctuation">}</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span><span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span> MyError<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">let</span> err <span class="token operator">=</span> MyError <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"test error"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">info!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>rustfmt<span class="token punctuation">:</span><span class="token punctuation">:</span>skip<span class="token punctuation">]</span> <span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>env<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">set_var</span><span class="token punctuation">(</span><span class="token string">"RUST_LOG"</span><span class="token punctuation">,</span> <span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token punctuation">:</span><span class="token punctuation">:</span>env<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">set_var</span><span class="token punctuation">(</span><span class="token string">"RUST_BACKTRACE"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env_logger<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> logger <span class="token operator">=</span> Logger<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="URL调度"><a href="#URL调度" class="headerlink" title="URL调度"></a>URL调度</h2><p>URL 调度提供了一种通过简单模式匹配语言将 URL 映射到对应处理程序代码的简单方法。如果模式之一与与请求关联的路径信息匹配，则调用特定的处理程序对象。请求处理程序是一个函数，它接受零个或多个可从请求中提取的参数（即impl FromRequest）并返回可转换为 HttpResponse 的类型（即impl Responder）。处理程序部分提供了更多信息。</p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>资源配置是将新资源添加到应用程序的行为。资源有一个名称，它充当 URL 生成的标识符。该名称还允许开发人员向现有资源添加路由。资源还有一个模式，旨在与URL的PATH部分进行匹配（方案和端口后面的部分，例如URL中的/foo/bar <a href="http://localhost:8080/foo/bar?q=value）" target="_blank" rel="noopener">http://localhost:8080/foo/bar?q=value）</a> 。它与QUERY部分（ ?之后的部分，例如<a href="http://localhost:8080/foo/bar?q=value中的q=value）不匹配。" target="_blank" rel="noopener">http://localhost:8080/foo/bar?q=value中的q=value）不匹配。</a></p><p>App ::route()方法提供了注册路由的简单方法。此方法将单个路由添加到应用程序路由表中。该方法接受路径模式、HTTP 方法和处理函数。route()可以对同一路径多次调用方法，在这种情况下，多个路由会注册同一资源路径。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然App::route()提供了注册路由的简单方法，但要访问完整的资源配置，必须使用不同的方法。App ::service()方法将单个资源添加到应用程序路由表中。此方法接受路径模式、防护和一条或多条路线。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>guard<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">}</span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/prefix"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/user/{name}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"user_detail"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>Ok<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>Ok<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果资源不包含任何路由或没有任何匹配的路由，则返回NOT FOUND HTTP 响应。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>资源包含一组路由。每个路由依次有一组guards和一个处理程序。可以使用返回新<code>RouteResource::route()</code>实例引用创建新路由。默认情况下，路由不包含任何guards，因此匹配所有请求，默认处理程序为：<code>HttpNotFound</code><br>应用程序根据资源注册和路由注册期间定义的路由标准路由传入请求。资源按照路由注册的顺序匹配它包含的所有路由Resource::route()。一条路线可以包含任意数量的guards，但只能包含一名处理程序。</p><pre class="line-numbers language-rust"><code class="language-rust">App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/path"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>Ok<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，如果GET的请求包含<code>Content-Type</code>、该head的值为<code>text/plain</code>、路径等于<code>/path</code>，则GET 返回<code>HttpResponse::Ok()</code>。Content-Type/path 如果资源无法匹配任何路由，则返回“NOT FOUND”响应。ResourceHandler::route()返回一个Route对象。可以使用类似构建器的模式来配置路由。可以使用以下配置方法：</p><ul><li>Route::guard()注册一个新的<code>guards</code>。每条路线可以注册任意数量的警卫。</li><li>Route::method()注册一个方法保护。每条路线可以注册任意数量的警卫。</li><li>Route::to()为此路由注册一个异步处理函数。只能注册一个处理程序。通常处理程序注册是最后一个配置操作。</li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>path路由配置的主要目的是根据 URL 路径模式匹配（或不匹配）请求。path表示所请求的 URL 的路径部分。</p><p>actix-web执行此操作的方式非常简单。当请求进入系统时，对于系统中存在的每个资源配置声明，actix 都会根据声明的模式检查请求的路径。此检查按照通过<code>App::service()</code>方法声明路由的顺序进行。如果找不到资源，则使用默认资源作为匹配的资源。当声明路由配置时，它可能包含路由保护参数。与路由声明关联的所有路由防护都必须用于true在检查期间用于给定请求的路由配置。如果提供给路由配置的路由保护参数集中的任何保护false在检查期间返回，则该路由将被跳过，并且路由匹配将继续通过有序的路由集。</p><p>如果任何路由匹配，则路由匹配过程停止，并调用与该路由关联的处理程序。如果在用尽所有路由模式后没有路由匹配，则返回NOT FOUND响应。</p><h2 id="资源模式"><a href="#资源模式" class="headerlink" title="资源模式"></a>资源模式</h2><p>actix 在模式参数中使用的模式匹配语言的语法很简单。路由配置中使用的模式可以以<code>/</code>开头。如果模式不以<code>/</code>字符开头，则在匹配时将在其前面添加<code>/</code>。例如，以下模式是等效的：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span>foo<span class="token punctuation">}</span>/bar/baz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和：</p><pre class="line-numbers language-bash"><code class="language-bash">/<span class="token punctuation">{</span>foo<span class="token punctuation">}</span>/bar/baz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>变量部分（替换标记）以{identifier}形式指定，这意味着“接受下一个<code>/</code>字符之前的任何字符，并将其用作对象中的名称<code>HttpRequest.match_info()</code>”。模式中的替换标记与正则表达式匹配<code>[^{}/]+</code>。<br><code>Amatch_info</code>是表示基于路由模式从URLParams中提取的动态部分的对象。它可以作为<code>request.match_info</code>使用。例如，以下模式定义了一个文字段 (foo) 和两个替换标记（baz 和 bar）：</p><pre class="line-numbers language-bash"><code class="language-bash">foo/<span class="token punctuation">{</span>baz<span class="token punctuation">}</span>/<span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的模式将匹配这些 URL，生成以下匹配信息：</p><pre class="line-numbers language-bash"><code class="language-bash">foo/1/2 -<span class="token operator">></span> Params <span class="token punctuation">{</span><span class="token string">'baz'</span><span class="token keyword">:</span> <span class="token string">'1'</span>, <span class="token string">'bar'</span><span class="token keyword">:</span> <span class="token string">'2'</span><span class="token punctuation">}</span>foo/abc/def -<span class="token operator">></span> Params <span class="token punctuation">{</span><span class="token string">'baz'</span><span class="token keyword">:</span> <span class="token string">'abc'</span>, <span class="token string">'bar'</span><span class="token keyword">:</span> <span class="token string">'def'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是，它不会匹配以下模式：</p><pre class="line-numbers language-bash"><code class="language-bash">foo/1/2/ -<span class="token operator">></span> No match <span class="token punctuation">(</span>trailing slash<span class="token punctuation">)</span>bar/abc/def -<span class="token operator">></span> First segment literal mismatch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>段中段替换标记的匹配将仅进行到模式中段中的第一个非字母数字字符。因此，例如，如果使用此路由模式：</p><pre class="line-numbers language-bash"><code class="language-bash">foo/<span class="token punctuation">{</span>name<span class="token punctuation">}</span>.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文字路径/foo/biz.html将与上述路由模式匹配，匹配结果将为<code>Params {&#39;name&#39;: &#39;biz&#39;}</code>。但是，文字路径将不匹配，因为它在由 表示的段末尾<code>/foo/biz</code>不包含文字（它只包含 <code>biz</code>，而不包含 <code>biz.html</code>）。<code>.html{name}.html</code></p><p>要捕获这两个片段，可以使用两个替换标记：</p><pre class="line-numbers language-bash"><code class="language-bash">foo/<span class="token punctuation">{</span>name<span class="token punctuation">}</span>.<span class="token punctuation">{</span>ext<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文字路径<code>/foo/biz.html</code>将与上述路由模式匹配，匹配结果将为<code>Params {&#39;name&#39;: &#39;biz&#39;, &#39;ext&#39;: &#39;html&#39;}</code>。.发生这种情况是因为两个替换标记{name}和之间存在 (句点) 的字面部分{ext}。<br>替换标记可以选择指定一个正则表达式，该表达式将用于决定路径段是否应与标记匹配。要指定替换标记应仅匹配正则表达式定义的一组特定字符，您必须使用稍微扩展形式的替换标记语法。在大括号内，替换标记名称后面必须跟一个冒号，然后是正则表达式。与替换标记关联的默认正则表达式[^/]+匹配一个或多个不是斜杠的字符。例如，在底层，替换标记{foo}可以更详细地拼写为{foo:[^/]+}。您可以将其更改为任意正则表达式以匹配任意字符序列，例如{foo:\d+}仅匹配数字。</p><p>段必须至少包含一个字符才能匹配段替换标记。例如，对于 URL `/abc/``：</p><pre class="line-numbers language-bash"><code class="language-bash">/abc/<span class="token punctuation">{</span>foo<span class="token punctuation">}</span>将不匹配。/<span class="token punctuation">{</span>foo<span class="token punctuation">}</span>/会匹配。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：在匹配模式之前，路径将被 URL 不加引号并解码为有效的 unicode 字符串，并且表示匹配路径段的值也将被 URL 不加引号。</p><p>例如，以下模式：</p><pre class="line-numbers language-bash"><code class="language-bash">foo/<span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当匹配以下 URL 时：<br><a href="http://example.com/foo/La%20Pe%C3%B1a" target="_blank" rel="noopener">http://example.com/foo/La%20Pe%C3%B1a</a><br>匹配字典将如下所示（该值经过 URL 解码）：</p><pre class="line-numbers language-bash"><code class="language-bash">Params <span class="token punctuation">{</span><span class="token string">'bar'</span><span class="token keyword">:</span> <span class="token string">'La Pe\xf1a'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>路径段中的文字字符串应表示提供给 actix 的路径的解码值。您不想在模式中使用 URL 编码值。例如，而不是这个：</p><pre class="line-numbers language-bash"><code class="language-bash">/Foo%20Bar/<span class="token punctuation">{</span>baz<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会想要使用这样的东西：</p><pre class="line-numbers language-bash"><code class="language-bash">/Foo Bar/<span class="token punctuation">{</span>baz<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以获得“尾部匹配”。为此，必须使用自定义正则表达式。</p><pre class="line-numbers language-bash"><code class="language-bash">foo/<span class="token punctuation">{</span>bar<span class="token punctuation">}</span>/<span class="token punctuation">{</span>tail:.\*<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的模式将匹配这些 URL，生成以下匹配信息：</p><pre class="line-numbers language-bash"><code class="language-bash">foo/1/2/ -<span class="token operator">></span> Params <span class="token punctuation">{</span><span class="token string">'bar'</span><span class="token keyword">:</span> <span class="token string">'1'</span>, <span class="token string">'tail'</span><span class="token keyword">:</span> <span class="token string">'2/'</span><span class="token punctuation">}</span>foo/abc/def/a/b/c -<span class="token operator">></span> Params <span class="token punctuation">{</span><span class="token string">'bar'</span><span class="token keyword">:</span> <span class="token string">'abc'</span>, <span class="token string">'tail'</span><span class="token keyword">:</span> <span class="token string">'def/a/b/c'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="范围界定"><a href="#范围界定" class="headerlink" title="范围界定"></a>范围界定</h3><p>范围界定可帮助您组织共享公共根路径的路由。您可以在范围内嵌套范围。假设您想要组织用于查看“用户”的端点的路径。此类路径可能包括：</p><pre class="line-numbers language-bash"><code class="language-bash">/用户/用户/显示/用户/显示/<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些路径的范围布局如下所示:</p><pre class="line-numbers language-rust"><code class="language-rust"># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/show"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">show_users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Show users"</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/show/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">user_detail</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Path<span class="token operator">&lt;</span><span class="token punctuation">(</span>u32<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"User detail: {}"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">into_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>show_users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>user_detail<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用域路径可以包含可变路径段作为资源。与未限定范围的路径一致。您可以从 获取可变路径段HttpRequest::match_info()。Path提取器还能够提取范围级别的变量段。表示匹配路径段的所有值都可以在 中找到HttpRequest::match_info。可以使用 检索具体值Path::get()。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/a/{v1}/{v2}/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">let</span> v1<span class="token punctuation">:</span> u8 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">match_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> v2<span class="token punctuation">:</span> u8 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">match_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>u8<span class="token punctuation">,</span> u8<span class="token punctuation">)</span> <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">match_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"Values {} {} {} {}"</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于路径“/a/1/2/”的此示例，值 v1 和 v2 将解析为“1”和“2”。</p><h3 id="路径信息"><a href="#路径信息" class="headerlink" title="路径信息"></a>路径信息</h3><p>Actix 提供类型安全路径信息提取功能。路径提取信息，目的地类型可以以几种不同的形式定义。最简单的方法是使用tuple类型。元组中的每个元素必须对应于路径模式中的一个元素。即您可以将路径模式/{id}/{username}/与Path&lt;(u32, String)&gt;类型进行匹配，但Path&lt;(String, String, String)&gt;类型总是会失败。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/{username}/{id}/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// &lt;- define path parameters</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Path<span class="token operator">&lt;</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> u32<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">let</span> info <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">into_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"Welcome {}! id: {}"</span><span class="token punctuation">,</span> info<span class="token number">.0</span><span class="token punctuation">,</span> info<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以将路径模式信息提取到结构中。在这种情况下，该结构必须实现serde 的 Deserialize特征。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> serde<span class="token punctuation">:</span><span class="token punctuation">:</span>Deserialize<span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">derive</span><span class="token punctuation">(</span>Deserialize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">struct</span> Info <span class="token punctuation">{</span>username<span class="token punctuation">:</span> String<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// extract path info using serde #[get("/{username}/index.html")] // &lt;- define path parameters</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Path<span class="token operator">&lt;</span>Info<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"Welcome {}!"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Query为请求查询参数提供了类似的功能。</p><h3 id="生成资源"><a href="#生成资源" class="headerlink" title="生成资源"></a>生成资源</h3><p>使用HttpRequest.url_for()方法根据资源模式生成 URL。例如，如果您配置了名称为“foo”且模式为“{a}/{b}/{c}”的资源，则可以执行以下操作：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> guard<span class="token punctuation">,</span> http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/test/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>HttpResponse<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">let</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>?<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;- generate url for "foo" resource</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Found</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>LOCATION<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>                web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/test/{a}/{b}/{c}"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;- set resource name, then it could be used in `url_for`</span>                    <span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>Ok<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将返回类似字符串的内容<a href="http://example.com/test/1/2/3（至少如果当前协议和主机名隐含http://example.com）。url_for()方法返回Url" target="_blank" rel="noopener">http://example.com/test/1/2/3（至少如果当前协议和主机名隐含http://example.com）。url_for()方法返回Url</a> 对象，以便您可以修改此 url（添加查询参数、锚点等）。url_for()只能为命名资源调用，否则将返回错误。</p><h3 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h3><p>有效 URL 的资源可以注册为外部资源。它们仅用于 URL 生成目的，并且在请求时从不考虑进行匹配。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Responder<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> Responder <span class="token punctuation">{</span><span class="token keyword">let</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">"youtube"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"oHg5SJYRHA0"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert_eq!</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;https://youtube.com/watch/oHg5SJYRHA0>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    url<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">external_resource</span><span class="token punctuation">(</span><span class="token string">"youtube"</span><span class="token punctuation">,</span> <span class="token string">"&lt;https://youtube.com/watch/{video_id}>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路径规范化和重定向到<code>/</code>之后，标准化意味着：</p><ul><li>向路径添加尾部斜杠。</li><li>将多个斜杠替换为一个。</li><li>一旦找到正确解析的路径，处理程序就会返回。如果全部启用，规范化条件的顺序为 1) 合并，2) 合并和附加，以及 3) 附加。如果路径至少满足其中一个条件，它将重定向到新路径。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>middleware<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">}</span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>middleware<span class="token punctuation">:</span><span class="token punctuation">:</span>NormalizePath<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/resource/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本例//resource///中将被重定向到/resource/。在此示例中，为所有方法注册了路径规范化处理程序，但您不应依赖此机制来重定向POST请求。附加斜杠Not Found的重定向会将POST请求转换为 GET，从而丢失原始请求中的所有POST数据。可以仅为GET请求注册路径规范化：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> http<span class="token punctuation">:</span><span class="token punctuation">:</span>Method<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>middleware<span class="token punctuation">:</span><span class="token punctuation">:</span>NormalizePath<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default_service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>Method<span class="token punctuation">:</span><span class="token punctuation">:</span>GET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用应用程序前缀来编写"><a href="#使用应用程序前缀来编写" class="headerlink" title="使用应用程序前缀来编写"></a>使用应用程序前缀来编写</h3><p>该web::scope()方法允许设置特定的应用范围。此范围表示一个资源前缀，该前缀将添加到资源配置添加的所有资源模式之前。这可用于帮助在与所包含的可调用对象作者预期不同的位置安装一组路由，同时仍保持相同的资源名称。</p><p>例如：</p><pre class="line-numbers language-rust"><code class="language-rust"># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/show"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">show_users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Show users"</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/show/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">user_detail</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Path<span class="token operator">&lt;</span><span class="token punctuation">(</span>u32<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"User detail: {}"</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">into_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>show_users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>user_detail<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，show_users路由将具有/users/show而不是/show的有效路由模式，因为应用程序的范围将被添加到该模式之前。仅当 URL 路径为/users/show时，该路由才会匹配，并且当HttpRequest.url_for()使用路由名称 show_users 调用该函数时，它将生成具有相同路径的 URL。</p><h3 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h3><p>您可以将guards视为一个简单的函数，它接受请求对象引用并返回true或false。从形式上来说，<code>guards</code>是任何实现该Guard特征的对象。Actix提供了几个谓词，您可以查看API文档的函数部分。这是一个简单的防护，用于检查请求是否包含特定标头：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Guard<span class="token punctuation">,</span> GuardContext<span class="token punctuation">}</span><span class="token punctuation">,</span>http<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ContentTypeHeader<span class="token punctuation">;</span><span class="token keyword">impl</span> Guard <span class="token keyword">for</span> ContentTypeHeader <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token operator">&amp;</span>GuardContext<span class="token punctuation">)</span> <span class="token punctuation">-></span> bool <span class="token punctuation">{</span>req<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>CONTENT_TYPE<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>            <span class="token string">"/"</span><span class="token punctuation">,</span>            web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>ContentTypeHeader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>Ok<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，仅当请求包含CONTENT-TYPE标头时才会调用索引处理程序。</p><p><code>guards</code>无法访问或修改请求对象，但可以在请求扩展中存储额外信息。</p><h3 id="修改保护"><a href="#修改保护" class="headerlink" title="修改保护"></a>修改保护</h3><p>您可以通过将任何谓词值包装在谓词中来反转其含义Not。例如，如果您想为除“GET”之外的所有方法返回“METHOD NOT ALLOWED”响应：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>guard<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span># <span class="token punctuation">[</span>actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>main<span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Not</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>MethodNotAllowed<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该Any<code>guards</code>接受<code>guards</code>列表，并且如果提供的任何<code>guards</code>匹配，则匹配。IE：</p><pre class="line-numbers language-rust"><code class="language-rust">guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Any</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该All<code>guards</code>接受<code>guards</code>列表，并且如果所有提供的<code>guards</code>都匹配，则匹配。IE：</p><pre class="line-numbers language-bash"><code class="language-bash">guard::All<span class="token punctuation">(</span>guard::Get<span class="token punctuation">(</span><span class="token punctuation">))</span>.and<span class="token punctuation">(</span>guard::Header<span class="token punctuation">(</span><span class="token string">"content-type"</span>, <span class="token string">"plain/text"</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更改默认的“未找到”<br>如果在路由表中找不到路径模式或者资源找不到匹配的路由，则使用默认资源。默认响应是NOT FOUND。可以使用 覆盖NOT FOUND响应App::default_service()。该方法接受与普通资源配置相同的配置功能App::service()。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default_service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Not</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>MethodNotAllowed<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Json请求"><a href="#Json请求" class="headerlink" title="Json请求"></a>Json请求</h2><p>json body 反序列化有多种选项。第一个选项是使用Json提取器。首先，定义一个接受Json<t>参数的处理程序函数，然后使用.to()注册该处理程序的方法。还可以通过使用serde_json::Valueas type来接受任意有效的 json 对象T。json 的第一个示例JSON Request取决于serde：</t></p><pre class="line-numbers language-toml"><code class="language-toml">[dependencies]serde = { version = "1.0", features = ["derive"] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>的第二个例子JSON Request取决于serdeandserde_json和futures：</p><pre class="line-numbers language-toml"><code class="language-toml">[dependencies]serde = { version = "1.0", features = ["derive"] }serde_json = "1"futures = "0.3"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果要为字段添加默认值，请参阅serde的文档。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> serde<span class="token punctuation">:</span><span class="token punctuation">:</span>Deserialize<span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> Info <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> String<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// extract `Info` using serde</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Json<span class="token operator">&lt;</span>Info<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"Welcome {}!"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您还可以手动将有效负载加载到内存中，然后将其反序列化。在下面的示例中，我们将反序列化MyObj结构。我们需要先加载请求体，然后将json反序列化为对象。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>error<span class="token punctuation">,</span> post<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> futures<span class="token punctuation">:</span><span class="token punctuation">:</span>StreamExt<span class="token punctuation">;</span><span class="token keyword">use</span> serde<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Deserialize<span class="token punctuation">,</span> Serialize<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Serialize, Deserialize)]</span><span class="token keyword">struct</span> MyObj <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    number<span class="token punctuation">:</span> i32<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> MAX_SIZE<span class="token punctuation">:</span> usize <span class="token operator">=</span> <span class="token number">262_144</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// max payload size is 256k</span>#<span class="token punctuation">[</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index_manual</span><span class="token punctuation">(</span><span class="token keyword">mut</span> payload<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Payload<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>HttpResponse<span class="token punctuation">,</span> Error<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// payload is a stream of Bytes objects</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> body <span class="token operator">=</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>BytesMut<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token function">Some</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await <span class="token punctuation">{</span>        <span class="token keyword">let</span> chunk <span class="token operator">=</span> chunk?<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// limit max size of in-memory payload</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> chunk<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> MAX_SIZE <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ErrorBadRequest</span><span class="token punctuation">(</span><span class="token string">"overflow"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        body<span class="token punctuation">.</span><span class="token function">extend_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// body is loaded, now we can deserialize serde-json</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> serde_json<span class="token punctuation">:</span><span class="token punctuation">:</span>from_slice<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>MyObj<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>body<span class="token punctuation">)</span>?<span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;- send response</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例目录中提供了这两个选项的完整示例。</p><p>Actix Web 自动解压缩有效负载。支持以下编解码器：</p><ul><li>Brotli</li><li>gzip</li><li>Deflate</li><li>Zstd<br>如果请求标头包含Content-Encoding标头，则根据标头值解压缩请求负载。不支持多个编解码器，即：Content-Encoding: br, gzip.</li></ul><h3 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h3><p>Actix 自动解码分块编码。提取web::Payload器已经包含解码的字节流。如果请求有效负载使用受支持的压缩编解码器之一（br、gzip、deflate）进行压缩，则字节流将被解压缩。</p><h4 id="多部分请求体"><a href="#多部分请求体" class="headerlink" title="多部分请求体"></a>多部分请求体</h4><p>Actix Web 通过外部 crate 提供多部分流支持actix-multipart。<a href="https://github.com/actix/examples/tree/master/forms/multipart" target="_blank" rel="noopener">完整例子</a>。</p><h3 id="Urlencoded"><a href="#Urlencoded" class="headerlink" title="Urlencoded"></a>Urlencoded</h3><p>Actix Web 通过解析为反序列化实例的提取器提供对application/x-www-form-urlencoded编码体的支持。web::Form实例的类型必须实现serdeDeserialize的特征。UrlEncoded future 在多种情况下可能会解析为错误：</p><ul><li>内容类型不是application/x-www-form-urlencoded</li><li>传输编码是chunked.</li><li>内容长度大于 256k</li><li>有效负载因错误而终止。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>post<span class="token punctuation">,</span> web<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> serde<span class="token punctuation">:</span><span class="token punctuation">:</span>Deserialize<span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Deserialize)]</span><span class="token keyword">struct</span> FormData <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> String<span class="token punctuation">,</span><span class="token punctuation">}</span>#<span class="token punctuation">[</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>form<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Form<span class="token operator">&lt;</span>FormData<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>    HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"username: {}"</span><span class="token punctuation">,</span> form<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流请求"><a href="#流请求" class="headerlink" title="流请求"></a>流请求</h3><p>HttpRequest是一个对象流Bytes。它可用于读取请求正文有效负载。在下面的示例中，我们逐块读取并打印请求负载：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> futures<span class="token punctuation">:</span><span class="token punctuation">:</span>StreamExt<span class="token punctuation">;</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">mut</span> body<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Payload<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>HttpResponse<span class="token punctuation">,</span> Error<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> bytes <span class="token operator">=</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>BytesMut<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token function">Some</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> item?<span class="token punctuation">;</span>        <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Chunk: {:?}"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">.</span><span class="token function">extend_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>类似构建器的模式用于构造的HttpResponse实例。HttpResponse提供了几种返回HttpResponseBuilder实例的方法，该实例实现了用于构建响应的各种便捷方法。方法.body、.finish和.json完成响应创建并返回构造的HttpResponse实例。如果在同一个构建器实例上多次调用此方法，构建器将出现panic。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentType<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">}</span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>    HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">content_type</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">plaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span><span class="token punctuation">(</span>"X<span class="token operator">-</span>Hd<span class="token string">r", "</span>sample"<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>该Json类型允许使用格式良好的 JSON 数据进行响应：只需返回 type 的值，Json<t>其中是要序列化为JSONT的结构的类型。该类型必须实现serde的特征。TSerialize 为了使以下示例正常工作，您需要将serde依赖项添加到Cargo.toml：</t></p><pre class="line-numbers language-toml"><code class="language-toml">[dependencies]serde = { version = "1.0", features = ["derive"] }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> Responder<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> serde<span class="token punctuation">:</span><span class="token punctuation">:</span>Serialize<span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Serialize)]</span><span class="token keyword">struct</span> MyObj <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span><span class="token punctuation">}</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/a/{name}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Path<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span><span class="token keyword">impl</span> Responder<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> MyObj <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Json</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以这种方式使用Json类型而不是调用.json 上的方法HttpResponse可以立即清楚地表明该函数返回 JSON 而不是任何其他类型的响应。</p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>Actix Web 可以使用Compress 中间件自动压缩有效负载。支持以下编解码器：</p><ul><li>Brotli</li><li>Gzip</li><li>Deflate</li><li>Identity<br>响应的Content-Encoding标头默认为ContentEncoding::Auto，它根据请求的Accept-Encoding标头执行自动内容压缩协商。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>    HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>middleware<span class="token punctuation">:</span><span class="token punctuation">:</span>Compress<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Content-Encoding通过设置一个值来显式禁用处理程序上的内容压缩Identity：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    get<span class="token punctuation">,</span> http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentEncoding<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>    HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// v- disable compression</span>        <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentEncoding<span class="token punctuation">:</span><span class="token punctuation">:</span>Identity<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>middleware<span class="token punctuation">:</span><span class="token punctuation">:</span>Compress<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当处理已经压缩的主体时（例如，当提供预压缩的资产时），Content-Encoding手动设置响应的标头以绕过中间件：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    get<span class="token punctuation">,</span> http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentEncoding<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> HELLO_WORLD<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>u8<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>    <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xcd</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span>    <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0xca</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>    HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentEncoding<span class="token punctuation">:</span><span class="token punctuation">:</span>Gzip<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>HELLO_WORLD<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>每个应用程序都应该经过充分测试。Actix Web 提供了针对您的应用程序执行集成测试的工具以及用于自定义提取器和中间件的单元测试工具。Actix Web 提供了请求构建器类型。TestRequest实现了类似构建器的模式。您可以使用它生成一个HttpRequest实例to_http_request()并调用您的处理程序或提取器。另请参阅</p><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>有几种方法可以测试您的应用程序。Actix Web 可用于在真实 HTTP 服务器中运行具有特定处理程序的应用程序。TestRequest::get()，TestRequest::post()也可以使用其他方法向测试服务器发送请求。要创建Service测试用，请使用test::init_service接受常规App构建器的方法。查看API 文档以获取更多信息。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token attribute attr-name">#[cfg(test)]</span><span class="token keyword">mod</span> tests <span class="token punctuation">{</span>    <span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentType<span class="token punctuation">,</span> test<span class="token punctuation">,</span> App<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token attribute attr-name">#[actix_web::test]</span>    async <span class="token keyword">fn</span> <span class="token function">test_index_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> app <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">init_service</span><span class="token punctuation">(</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token keyword">let</span> req <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span>TestRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">plaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">to_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> resp <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">call_service</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>app<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert!</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token attribute attr-name">#[actix_web::test]</span>    async <span class="token keyword">fn</span> <span class="token function">test_index_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> app <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">init_service</span><span class="token punctuation">(</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token keyword">let</span> req <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span>TestRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> resp <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">call_service</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>app<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert!</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_client_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您需要更复杂的应用程序配置，测试应该与创建普通应用程序非常相似。例如，您可能需要初始化应用程序状态。创建一个App方法data并附加状态，就像在普通应用程序中一样。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token attribute attr-name">#[cfg(test)]</span><span class="token keyword">mod</span> tests <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>test<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token attribute attr-name">#[actix_web::test]</span>    async <span class="token keyword">fn</span> <span class="token function">test_index_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> app <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">init_service</span><span class="token punctuation">(</span>            App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">app_data</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span>Data<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>AppState <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token keyword">let</span> req <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span>TestRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> resp<span class="token punctuation">:</span> AppState <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">call_and_read_body_json</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>app<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert_eq!</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>count<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流响应"><a href="#流响应" class="headerlink" title="流响应"></a>流响应</h3><p>如果您需要测试流生成，则只需调用并将into_parts()结果主体转换为 future 并执行它就足够了，例如在测试Server Sent Events时。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>task<span class="token punctuation">:</span><span class="token punctuation">:</span>Poll<span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    http<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentEncoding<span class="token punctuation">,</span> StatusCode<span class="token punctuation">}</span><span class="token punctuation">,</span>    web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> futures<span class="token punctuation">:</span><span class="token punctuation">:</span>stream<span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">sse</span><span class="token punctuation">(</span>_req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> counter<span class="token punctuation">:</span> usize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// yields `data: N` where N in [5; 1]</span>    <span class="token keyword">let</span> server_events <span class="token operator">=</span>        stream<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">poll_fn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token punctuation">|</span>_cx<span class="token punctuation">|</span></span> <span class="token punctuation">-></span> Poll<span class="token operator">&lt;</span>Option<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">,</span> Error<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Poll<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ready</span><span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">let</span> payload <span class="token operator">=</span> <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"data: {}\n\n"</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>            counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            Poll<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ready</span><span class="token punctuation">(</span><span class="token function">Some</span><span class="token punctuation">(</span><span class="token function">Ok</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">build</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>OK<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span><span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token string">"text/event-stream"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentEncoding<span class="token punctuation">:</span><span class="token punctuation">:</span>Identity<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">streaming</span><span class="token punctuation">(</span>server_events<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>sse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[cfg(test)]</span><span class="token keyword">mod</span> tests <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>body<span class="token punctuation">,</span> body<span class="token punctuation">:</span><span class="token punctuation">:</span>MessageBody <span class="token keyword">as</span> _<span class="token punctuation">,</span> rt<span class="token punctuation">:</span><span class="token punctuation">:</span>pin<span class="token punctuation">,</span> test<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> futures<span class="token punctuation">:</span><span class="token punctuation">:</span>future<span class="token punctuation">;</span>    <span class="token attribute attr-name">#[actix_web::test]</span>    async <span class="token keyword">fn</span> <span class="token function">test_stream_chunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> app <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">init_service</span><span class="token punctuation">(</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>sse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token keyword">let</span> req <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span>TestRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> resp <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">call_service</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>app<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert!</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> body <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">into_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pin!</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// first chunk</span>        <span class="token keyword">let</span> bytes <span class="token operator">=</span> future<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">poll_fn</span><span class="token punctuation">(</span><span class="token operator">|</span>cx<span class="token operator">|</span> body<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll_next</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert_eq!</span><span class="token punctuation">(</span>            bytes<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">b"data: 5\n\n"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// second chunk</span>        <span class="token keyword">let</span> bytes <span class="token operator">=</span> future<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">poll_fn</span><span class="token punctuation">(</span><span class="token operator">|</span>cx<span class="token operator">|</span> body<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll_next</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert_eq!</span><span class="token punctuation">(</span>            bytes<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">b"data: 4\n\n"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// remaining part</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">3</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> expected_data <span class="token operator">=</span> <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"data: {}\n\n"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> bytes <span class="token operator">=</span> future<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">poll_fn</span><span class="token punctuation">(</span><span class="token operator">|</span>cx<span class="token operator">|</span> body<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll_next</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>            <span class="token function">assert_eq!</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span>expected_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token attribute attr-name">#[actix_web::test]</span>    async <span class="token keyword">fn</span> <span class="token function">test_stream_full_payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> app <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">init_service</span><span class="token punctuation">(</span>App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>sse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token keyword">let</span> req <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span>TestRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> resp <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">call_service</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>app<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert!</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> body <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">into_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> bytes <span class="token operator">=</span> body<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_bytes</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert_eq!</span><span class="token punctuation">(</span>            bytes<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">b"data: 5\n\ndata: 4\n\ndata: 3\n\ndata: 2\n\ndata: 1\n\n"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>单元测试对于应用程序的价值相当有限，但在开发提取器、中间件和响应器时可能很有用。鉴于此，如果您想对自定义进行断言，则可以直接调用独立定义的处理程序函数，而不使用路由宏（如） 。#[get(“/“)]Responder</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token attribute attr-name">#[cfg(test)]</span><span class="token keyword">mod</span> tests <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        http<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentType<span class="token punctuation">}</span><span class="token punctuation">,</span>        test<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token attribute attr-name">#[actix_web::test]</span>    async <span class="token keyword">fn</span> <span class="token function">test_index_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> req <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span>TestRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">insert_header</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">plaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">to_http_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert_eq!</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">:</span><span class="token punctuation">:</span>StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token attribute attr-name">#[actix_web::test]</span>    async <span class="token keyword">fn</span> <span class="token function">test_index_not_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> req <span class="token operator">=</span> test<span class="token punctuation">:</span><span class="token punctuation">:</span>TestRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_http_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> resp <span class="token operator">=</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>await<span class="token punctuation">;</span>        <span class="token function">assert_eq!</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">:</span><span class="token punctuation">:</span>StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>BAD_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>Actix Web 的中间件系统允许我们向请求/响应处理添加额外的行为。中间件可以挂钩传入的请求进程，使我们能够修改请求以及停止请求处理以尽早返回响应。中间件还可以连接到响应处理。通常，中间件涉及以下操作：</p><ul><li>预处理请求</li><li>后处理响应</li><li>修改应用程序状态</li><li>访问外部服务（redis、日志记录、会话）<br>中间件为每个App、scope、 或注册Resource，并以与注册相反的顺序执行。一般来说，中间件是一种实现Service Trait和Transform Trait 的类型。特征中的每个方法都有一个默认实现。每个方法都可以立即返回结果或未来对象。</li></ul><p>下面演示创建一个简单的中间件：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>future<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>ready<span class="token punctuation">,</span> Ready<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    dev<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>forward_ready<span class="token punctuation">,</span> Service<span class="token punctuation">,</span> ServiceRequest<span class="token punctuation">,</span> ServiceResponse<span class="token punctuation">,</span> Transform<span class="token punctuation">}</span><span class="token punctuation">,</span>    Error<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> futures_util<span class="token punctuation">:</span><span class="token punctuation">:</span>future<span class="token punctuation">:</span><span class="token punctuation">:</span>LocalBoxFuture<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// There are two steps in middleware processing.</span><span class="token comment" spellcheck="true">// 1. Middleware initialization, middleware factory gets called with</span><span class="token comment" spellcheck="true">//    next service in chain as parameter.</span><span class="token comment" spellcheck="true">// 2. Middleware's call method gets called with normal request.</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> SayHi<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Middleware factory is `Transform` trait</span><span class="token comment" spellcheck="true">// `S` - type of the next service</span><span class="token comment" spellcheck="true">// `B` - type of response's body</span><span class="token keyword">impl</span><span class="token operator">&lt;</span>S<span class="token punctuation">,</span> B<span class="token operator">></span> Transform<span class="token operator">&lt;</span>S<span class="token punctuation">,</span> ServiceRequest<span class="token operator">></span> <span class="token keyword">for</span> SayHi<span class="token keyword">where</span>    S<span class="token punctuation">:</span> Service<span class="token operator">&lt;</span>ServiceRequest<span class="token punctuation">,</span> Response <span class="token operator">=</span> ServiceResponse<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">,</span> Error <span class="token operator">=</span> Error<span class="token operator">></span><span class="token punctuation">,</span>    S<span class="token punctuation">:</span><span class="token punctuation">:</span>Future<span class="token punctuation">:</span> '<span class="token keyword">static</span><span class="token punctuation">,</span>    B<span class="token punctuation">:</span> '<span class="token keyword">static</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token keyword">type</span> Response <span class="token operator">=</span> ServiceResponse<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">type</span> Error <span class="token operator">=</span> Error<span class="token punctuation">;</span>    <span class="token keyword">type</span> InitError <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">type</span> Transform <span class="token operator">=</span> SayHiMiddleware<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">type</span> Future <span class="token operator">=</span> Ready<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Self<span class="token punctuation">:</span><span class="token punctuation">:</span>Transform<span class="token punctuation">,</span> Self<span class="token punctuation">:</span><span class="token punctuation">:</span>InitError<span class="token operator">>></span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function">new_transform</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> service<span class="token punctuation">:</span> S<span class="token punctuation">)</span> <span class="token punctuation">-></span> Self<span class="token punctuation">:</span><span class="token punctuation">:</span>Future <span class="token punctuation">{</span>        <span class="token function">ready</span><span class="token punctuation">(</span><span class="token function">Ok</span><span class="token punctuation">(</span>SayHiMiddleware <span class="token punctuation">{</span> service <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> SayHiMiddleware<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token punctuation">{</span>    service<span class="token punctuation">:</span> S<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span>S<span class="token punctuation">,</span> B<span class="token operator">></span> Service<span class="token operator">&lt;</span>ServiceRequest<span class="token operator">></span> <span class="token keyword">for</span> SayHiMiddleware<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token keyword">where</span>    S<span class="token punctuation">:</span> Service<span class="token operator">&lt;</span>ServiceRequest<span class="token punctuation">,</span> Response <span class="token operator">=</span> ServiceResponse<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">,</span> Error <span class="token operator">=</span> Error<span class="token operator">></span><span class="token punctuation">,</span>    S<span class="token punctuation">:</span><span class="token punctuation">:</span>Future<span class="token punctuation">:</span> '<span class="token keyword">static</span><span class="token punctuation">,</span>    B<span class="token punctuation">:</span> '<span class="token keyword">static</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token keyword">type</span> Response <span class="token operator">=</span> ServiceResponse<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">type</span> Error <span class="token operator">=</span> Error<span class="token punctuation">;</span>    <span class="token keyword">type</span> Future <span class="token operator">=</span> LocalBoxFuture<span class="token operator">&lt;</span>'<span class="token keyword">static</span><span class="token punctuation">,</span> Result<span class="token operator">&lt;</span>Self<span class="token punctuation">:</span><span class="token punctuation">:</span>Response<span class="token punctuation">,</span> Self<span class="token punctuation">:</span><span class="token punctuation">:</span>Error<span class="token operator">>></span><span class="token punctuation">;</span>    <span class="token function">forward_ready!</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> ServiceRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> Self<span class="token punctuation">:</span><span class="token punctuation">:</span>Future <span class="token punctuation">{</span>        <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hi from start. You requested: {}"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fut <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        Box<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pin</span><span class="token punctuation">(</span>async <span class="token keyword">move</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> fut<span class="token punctuation">.</span>await?<span class="token punctuation">;</span>            <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hi from response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Ok</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，对于简单的用例，您可以使用wrap_fn来创建小型的临时中间件：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>dev<span class="token punctuation">:</span><span class="token punctuation">:</span>Service <span class="token keyword">as</span> _<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> futures_util<span class="token punctuation">:</span><span class="token punctuation">:</span>future<span class="token punctuation">:</span><span class="token punctuation">:</span>FutureExt<span class="token punctuation">;</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">wrap_fn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span>req<span class="token punctuation">,</span> srv<span class="token punctuation">|</span></span> <span class="token punctuation">{</span>            <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hi from start. You requested: {}"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            srv<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span>res<span class="token punctuation">|</span></span> <span class="token punctuation">{</span>                <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hi from response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>            <span class="token string">"/index.html"</span><span class="token punctuation">,</span>            web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token operator">||</span> async <span class="token punctuation">{</span> <span class="token string">"Hello, middleware!"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Actix Web 提供了一些有用的中间件，例如日志记录、用户会话、压缩等。<br>警告：如果多次使用wrap()、wrap_fn()多次，最后一次出现的将首先执行。</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>日志记录作为中间件实现。通常将日志记录中间件注册为应用程序的第一个中间件。必须为每个应用程序注册日志记录中间件。中间件Logger使用标准日志箱来记录信息。您应该为actix_web包启用记录器以查看访问日志（env_logger或类似）。使用Logger指定的format. Logger可以使用方法创建默认值default，它使用默认格式：</p><pre class="line-numbers language-bash"><code class="language-bash">  %a %t <span class="token string">"%r"</span> %s %b <span class="token string">"%{Referer}i"</span> <span class="token string">"%{User-Agent}i"</span> %T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>middleware<span class="token punctuation">:</span><span class="token punctuation">:</span>Logger<span class="token punctuation">;</span><span class="token keyword">use</span> env_logger<span class="token punctuation">:</span><span class="token punctuation">:</span>Env<span class="token punctuation">;</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>    env_logger<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">init_from_env</span><span class="token punctuation">(</span>Env<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default_filter_or</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Logger<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>Logger<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"%a %{User-Agent}i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是默认日志记录格式的示例：</p><pre class="line-numbers language-bash"><code class="language-bash">INFO:actix_web::middleware::logger: 127.0.0.1:59934 <span class="token punctuation">[</span>02/Dec/2017:00:21:43 -0800<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> 302 0 <span class="token string">"-"</span> <span class="token string">"curl/7.54.0"</span> 0.000397INFO:actix_web::middleware::logger: 127.0.0.1:59947 <span class="token punctuation">[</span>02/Dec/2017:00:22:40 -0800<span class="token punctuation">]</span> <span class="token string">"GET /index.html HTTP/1.1"</span> 200 0 <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:57.0) Gecko/20100101 Firefox/57.0"</span> 0.000646<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>%%</code>百分号</li><li><code>%a</code>远程 IP 地址（如果使用反向代理，则为代理的 IP 地址）</li><li><code>%t</code>开始处理请求的时间</li><li><code>%P</code>为请求提供服务的子进程 ID</li><li><code>%r</code>请求的第一行</li><li><code>%s</code>响应状态码</li><li><code>%b</code>响应大小（以字节为单位），包括 HTTP 标头</li><li><code>%T</code>处理请求所花费的时间（以秒为单位，采用 .06f 格式的浮动分数）</li><li><code>%D</code>处理请求所花费的时间（以毫秒为单位）</li><li><code>%{FOO}</code>irequest.headers [‘FOO’]</li><li><code>%{FOO}</code>o响应.headers [‘FOO’]</li><li><code>%{FOO}</code>eos.environ [‘FOO’]</li></ul><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>要设置默认响应头，DefaultHeaders可以使用中间件。如果响应标头已包含指定标头，则 DefaultHeaders中间件不会设置标头。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span>Method<span class="token punctuation">,</span> middleware<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>middleware<span class="token punctuation">:</span><span class="token punctuation">:</span>DefaultHeaders<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"X-Version"</span><span class="token punctuation">,</span> <span class="token string">"0.2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>                web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>Ok<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">method</span><span class="token punctuation">(</span>Method<span class="token punctuation">:</span><span class="token punctuation">:</span>HEAD<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>MethodNotAllowed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p>Actix Web 提供了会话管理的通用解决方案。actix-session中间件可以使用多种后端类型来存储会话数据。默认情况下，仅实现 cookie 会话后端。可以添加其他后端实现。CookieSession使用cookie 作为会话存储。CookieSessionBackend创建的会话仅限于存储少于 4000 字节的数据，因为有效负载必须适合单个 cookie。如果会话包含超过 4000 字节，则会生成内部服务器错误。cookie 可能具有签名或私有的安全策略。每个都有一个各自的CookieSession构造函数。客户端可以查看但不能修改签名的cookie 。客户端既不能查看也不能修改私有cookie 。构造函数将键作为参数。这是 cookie 会话的私钥 - 当该值更改时，所有会话数据都会丢失。一般来说，您创建一个SessionStorage中间件并使用特定的后端实现（例如CookieSession. 要访问会话数据，Session必须使用提取器。该方法返回一个Session对象，它允许我们获取或设置会话数据。</p><pre class="line-numbers language-rust"><code class="language-rust">actix_session<span class="token punctuation">:</span><span class="token punctuation">:</span>storage<span class="token punctuation">:</span><span class="token punctuation">:</span>CookieSessionStore在板条箱功能“cookie<span class="token operator">-</span>session”上可用。<span class="token keyword">use</span> actix_session<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Session<span class="token punctuation">,</span> SessionMiddleware<span class="token punctuation">,</span> storage<span class="token punctuation">:</span><span class="token punctuation">:</span>CookieSessionStore<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> cookie<span class="token punctuation">:</span><span class="token punctuation">:</span>Key<span class="token punctuation">}</span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>session<span class="token punctuation">:</span> Session<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>HttpResponse<span class="token punctuation">,</span> Error<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// access session data</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token function">Some</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>i32<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span>? <span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>?<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>?<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token function">format!</span><span class="token punctuation">(</span>        <span class="token string">"Count is {:?}!"</span><span class="token punctuation">,</span>        session<span class="token punctuation">.</span>get<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>i32<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span>?<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">// create cookie based session middleware</span>                SessionMiddleware<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">builder</span><span class="token punctuation">(</span>CookieSessionStore<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Key<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cookie_secure</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="错误-5"><a href="#错误-5" class="headerlink" title="错误"></a>错误</h3><p>ErrorHandlers中间件允许我们为响应提供自定义处理程序。您可以使用该ErrorHandlers::handler()方法为特定状态代码注册自定义错误处理程序。您可以修改现有响应或创建全新的响应。错误处理程序可以立即返回响应，也可以返回解析为响应的 future。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>middleware<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>ErrorHandlerResponse<span class="token punctuation">,</span> ErrorHandlers<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    dev<span class="token punctuation">,</span>    http<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>header<span class="token punctuation">,</span> StatusCode<span class="token punctuation">}</span><span class="token punctuation">,</span>    web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Result<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">fn</span> add_error_header<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">mut</span> res<span class="token punctuation">:</span> dev<span class="token punctuation">:</span><span class="token punctuation">:</span>ServiceResponse<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>ErrorHandlerResponse<span class="token operator">&lt;</span>B<span class="token operator">>></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">response_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>        header<span class="token punctuation">:</span><span class="token punctuation">:</span>CONTENT_TYPE<span class="token punctuation">,</span>        header<span class="token punctuation">:</span><span class="token punctuation">:</span>HeaderValue<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>ErrorHandlerResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Response</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">map_into_left_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>                ErrorHandlers<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>INTERNAL_SERVER_ERROR<span class="token punctuation">,</span> add_error_header<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>InternalServerError<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单个文件"><a href="#单个文件" class="headerlink" title="单个文件"></a>单个文件</h2><p>可以使用自定义路径模式和NamedFile. 为了匹配路径尾部，我们可以使用[.*]正则表达式。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_files<span class="token punctuation">:</span><span class="token punctuation">:</span>NamedFile<span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>HttpRequest<span class="token punctuation">,</span> Result<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>path<span class="token punctuation">:</span><span class="token punctuation">:</span>PathBuf<span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>NamedFile<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> path<span class="token punctuation">:</span> PathBuf <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">match_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>NamedFile<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>?<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/{filename:.*}"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>危险:将路径尾部与[.*]正则表达式匹配并使用它返回一个NamedFile会产生严重的安全隐患。../它为攻击者提供了插入 URL 并访问运行服务器的用户有权访问的主机上的每个文件的可能性。要从特定目录和子目录提供文件，Files可以使用。Files必须用方法注册App::service()，否则将无法服务子路径。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_files <span class="token keyword">as</span> fs<span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>fs<span class="token punctuation">:</span><span class="token punctuation">:</span>Files<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"/static"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show_files_listing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，子目录的文件列表被禁用。尝试加载目录列表将返回404 Not Found响应。要启用文件列表，请使用Files::show_files_listing()方法。可以重定向到特定的索引文件，而不是显示目录的文件列表。使用该Files::index_file()方法来配置此重定向。NamedFiles可以指定服务文件的各种选项：</p><ul><li>set_content_disposition:用于将文件的 mime 映射到相应Content-Disposition类型的函数</li><li>use_etag:指定是否ETag应计算并包含在标题中。</li><li>use_last_modified:指定是否应使用文件修改时间戳并将其添加到Last-Modified标头。<br>上述所有方法都是可选的，并提供了最佳默认值，但可以自定义其中任何一个。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_files <span class="token keyword">as</span> fs<span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>ContentDisposition<span class="token punctuation">,</span> DispositionType<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> App<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/{filename:.*}"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>fs<span class="token punctuation">:</span><span class="token punctuation">:</span>NamedFile<span class="token punctuation">,</span> Error<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> path<span class="token punctuation">:</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>path<span class="token punctuation">:</span><span class="token punctuation">:</span>PathBuf <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">match_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>NamedFile<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>?<span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>file        <span class="token punctuation">.</span><span class="token function">use_last_modified</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">set_content_disposition</span><span class="token punctuation">(</span>ContentDisposition <span class="token punctuation">{</span>            disposition<span class="token punctuation">:</span> DispositionType<span class="token punctuation">:</span><span class="token punctuation">:</span>Attachment<span class="token punctuation">,</span>            parameters<span class="token punctuation">:</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该配置也可以应用于目录服务：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_files <span class="token keyword">as</span> fs<span class="token punctuation">;</span><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>            fs<span class="token punctuation">:</span><span class="token punctuation">:</span>Files<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"/static"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">show_files_listing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">use_last_modified</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/16/rust-san-fang-ku-rayon/"/>
      <url>/2023/09/16/rust-san-fang-ku-rayon/</url>
      
        <content type="html"><![CDATA[<hr><p>title: rust三方库(rayon)<br>date:<br>top: false<br>cover: true<br>toc: true<br>mathjax: true<br>password:<br>summary:<br>tags:</p><h2 id="categories"><a href="#categories" class="headerlink" title="categories:"></a>categories:</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust标准库(时间)</title>
      <link href="/2023/09/14/rust-biao-zhun-ku-shi-jian/"/>
      <url>/2023/09/14/rust-biao-zhun-ku-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="时间库常见的对象"><a href="#时间库常见的对象" class="headerlink" title="时间库常见的对象"></a>时间库常见的对象</h1><ul><li>Duration:代表时间跨度的类型，通常的用法是超时统计。</li><li>Instant：纳秒单位的时钟。</li><li>SystemTime：系统时钟。</li><li>SystemTimeErro：系统时钟错误。</li><li>TryFromFloatSecsError：转换浮点数为Duration时的报错。</li></ul><h2 id="Duration时间"><a href="#Duration时间" class="headerlink" title="Duration时间"></a>Duration时间</h2><ul><li><code>Duration = Duration::new(u64::MAX, NANOS_PER_SEC - 1)</code>:获取最大时间Duration。</li><li><code>fn new(secs: u64, nanos: u32) -&gt; Duration</code>:创建一个特定值的Duration。</li><li><code>fn from_secs(secs: u64) -&gt; Duration</code>:创建特定秒数的Duration。</li><li><code>from_millis(millis: u64) -&gt; Duration</code>:创建特定毫秒数的Duration。</li><li><code>from_micros(micros: u64) -&gt; Duration</code>:指定特定微妙数的Duration。</li><li><code>from_nanos(nanos: u64) -&gt; Duration</code>:创建特定纳秒数的Duration。</li><li><code>is_zero(&amp;self) -&gt; bool</code>:返回Duration是否为0。</li><li><code>as_secs(&amp;self) -&gt; u64</code>:转换Duration为秒数。</li><li><code>subsec_millis(&amp;self) -&gt; u32</code>:转换除去首位后剩余部分为毫秒数，比如4.321秒，输出为321。</li><li><code>subsec_micros(&amp;self) -&gt; u32</code>:转换为微秒单位后除去首位之后的微秒数，比如1.234567s,输出234567。</li><li><code>fn as_millis(&amp;self) -&gt; u128</code>:转换为纳秒单位后取出首位之后剩余的纳秒数，比如1001000123。</li><li><code>fn subsec_nanos(&amp;self) -&gt; u32</code>:转换为纳秒单位后，原先小数部分转换为纳秒单位。</li><li><code>as_millis(&amp;self) -&gt; u128</code>:返回单位为微妙数后小数部分转换为微秒数。</li><li><code>as_micros(&amp;self) -&gt; u128</code>:返回小数部分转换为毫秒之后的数值。</li><li><code>as_nanos(&amp;self) -&gt; u128</code>:转换小数部分为纳米之后的数值。</li><li><code>checked_add(self, rhs: Duration) -&gt; Option&lt;Duration&gt;</code>:检查加法，如果饱和值溢出则返回None否则返回计算值。</li><li><code>saturating_add(self, rhs: Duration) -&gt; Duration</code>:饱和值加法，如果溢出则返回饱和值。</li><li><code>checked_sub(self, rhs: Duration) -&gt; Option&lt;Duration&gt;</code>:检查减法，如果溢出则返回None否则返回计算值。</li><li><code>saturating_sub(self, rhs: Duration) -&gt; Duration</code>:饱和值减法，如果溢出则返回饱和值否则返回计算值。</li><li><code>checked_mul(self, rhs: u32) -&gt; Option&lt;Duration&gt;</code>:饱和值乘法，如果溢出则返回None否则返回计算值。</li><li><code>saturating_mul(self, rhs: u32) -&gt; Duration</code>:饱和值乘法，如果语出则返回饱和值否则返回计算值。</li><li><code>checked_div(self, rhs: u32) -&gt; Option&lt;Duration&gt;</code>:检查除法，如果被除数为0则返回None，否则返回计算值。</li><li><code>as_secs_f64(&amp;self) -&gt; f64</code>:返回Duration包含的秒数，fp64输出。</li><li><code>as_secs_f32(&amp;self) -&gt; f32</code>:返回Duration包含的秒数，fp32输出。</li><li><code>from_secs_f64(secs: f64) -&gt; Duration</code>:从fp64秒构建Duration。</li><li><code>from_secs_f32(secs: f32) -&gt; Duration</code>:从fp32秒构建Duration。</li><li><code>mul_f64(self, rhs: f64) -&gt; Duration</code>:Duration乘以rhs(fp32)返回Duration。</li><li><code>mul_f32(self, rhs: f32) -&gt; Duration</code>:Duration乘以rhs(fp64)返回Duration。</li><li><code>div_f64(self, rhs: f64) -&gt; Duration</code>:Duration除以rhs(fp64)返回Duration。</li><li><code>div_f32(self, rhs: f32) -&gt; Duration</code>:Duration除以rhs(fp32)返回Duration。</li><li><code>div_duration_f64(self, rhs: Duration) -&gt; f64</code>:Duration除以另一个Durationrhs返回f64结果（实验接口）。</li><li><code>div_duration_f32(self, rhs: Duration) -&gt; f32</code>:Duration除以另一个Durationrhs返回f32结果（实验接口）。</li><li><code>try_from_secs_f32(secs: f32) -&gt; Result&lt;Duration, TryFromFloatSecsError&gt;</code>:from_secs_f32的检查版本，如果secs为负数、溢出或则无限则返回Err。</li><li><code>try_from_secs_f64(secs: f64) -&gt; Result&lt;Duration, TryFromFloatSecsError&gt;</code>:from_secs_f64的检查版本，如果secs为负数、溢出或者无限则返回Err。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>time<span class="token punctuation">:</span><span class="token punctuation">:</span>Duration<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> five_second <span class="token operator">=</span> Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> five_nanosecond <span class="token operator">=</span> Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_nanos</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span>        <span class="token string">"5 second = {:?} 5 nano second = {:?}"</span><span class="token punctuation">,</span>        five_second<span class="token punctuation">,</span> five_nanosecond    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>Duration<span class="token punctuation">:</span><span class="token punctuation">:</span>MAX<span class="token punctuation">,</span> Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>u64<span class="token punctuation">:</span><span class="token punctuation">:</span>MAX<span class="token punctuation">,</span> <span class="token number">1000_000_000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> five_second_new <span class="token operator">=</span> Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> five_mili <span class="token operator">=</span> Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span>        <span class="token string">"acc time = {:?} five 毫秒 = {:?}"</span><span class="token punctuation">,</span>        five_second_new<span class="token punctuation">,</span> five_mili    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert!</span><span class="token punctuation">(</span>Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert!</span><span class="token punctuation">(</span>Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert!</span><span class="token punctuation">(</span>Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">5432</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subsec_millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>Duration<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">5010</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subsec_nanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000_000_0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h2><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><ul><li><code>now() -&gt; Instant</code>:返回一个对应当前的Instant。</li><li><code>duration_since(&amp;self, earlier: Instant) -&gt; Duration</code>:返回相对一另一个Instant流失了多少时间的Duration，如果当前Instant晚于另一个时间则返回0。</li><li><code>checked_duration_since(&amp;self, earlier: Instant) -&gt; Option&lt;Duration&gt;</code>:检查版本的duration_since,monotonicity bugs将导致结果为None。</li><li><code>saturating_duration_since(&amp;self, earlier: Instant) -&gt; Duration</code>：返回Instant相较于另一个Instant流失的时间，如果当前Instant晚于另一个时间则返回0。</li><li><code>elapsed(&amp;self) -&gt; Duration</code>：返回流失了多少时间。</li><li><code>checked_add(&amp;self, duration: Duration) -&gt; Option&lt;Instant&gt;</code>：返回当前Instant+Instant之后的结果（越界则为None）。</li><li><code>checked_sub(&amp;self, duration: Duration) -&gt; Option&lt;Instant&gt;</code>：返回当前Instant-Instan之后的结果（越界则为None）。</li><li>``</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础(常见的trait)</title>
      <link href="/2023/09/14/rust-ji-chu-chang-jian-de-trait/"/>
      <url>/2023/09/14/rust-ji-chu-chang-jian-de-trait/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础(文件系统fs)</title>
      <link href="/2023/09/13/rust-ji-chu-wen-jian-xi-tong-fs/"/>
      <url>/2023/09/13/rust-ji-chu-wen-jian-xi-tong-fs/</url>
      
        <content type="html"><![CDATA[<h1 id="文件系统中常见的包"><a href="#文件系统中常见的包" class="headerlink" title="文件系统中常见的包"></a>文件系统中常见的包</h1><ul><li>DirBuilder:创建拥有丰富特性的目录的构建器。</li><li>DirEntry:ReadDir迭代器返回的条目。</li><li>File:访问文件系统上的文件的对象。</li><li>FileType：代表访问文件类型的结构。它由Metadata::file_type方法返回。</li><li>Metadata：文件的原始信息。</li><li>OpenOptions：关于文件如何打开的选项和flags。</li><li>Permissions：文件的权限。</li><li>ReadDir:目录入口迭代器。</li></ul><h2 id="DirBuilder"><a href="#DirBuilder" class="headerlink" title="DirBuilder"></a>DirBuilder</h2><p>实现方法：</p><ul><li><code>new() -&gt; DirBuilder</code>：创建一个默认构造参数的DirBuilder。</li><li><code>recursive(&amp;mut self, recursive: bool) -&gt; &amp;mut Self</code>：递归创建目录所有父目录，默认不开启。</li><li><code>create&lt;P: AsRef&lt;Path&gt;&gt;(&amp;self, path: P) -&gt; Result&lt;()&gt;</code>：创建一个特定的目录。目录存在则报错，除非开启了递归模式。<br>实现的trait包括：</li><li><code>Debug</code>：用于格式化输出对象。</li><li><code>DirBuilderExt</code>：用于unix系统下设置权限。<br>自动实现trait：</li><li><code>RefUnwindSafe</code></li><li><code>Send</code></li><li><code>Sync</code></li><li><code>Unpin</code></li><li><code>UnwindSafe</code><br>使用示例：</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fs<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">"/tmp/aa/bb/cc/dd"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> builder <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>DirBuilder<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">metadata</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"成功创建目录:{}"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DirEntry"><a href="#DirEntry" class="headerlink" title="DirEntry"></a>DirEntry</h2><p>DirEntry 代表了文件系统上的一个入口，每个入口都可以使用对应的方法获取其相关信息。<br>常用方法：</p><ul><li><code>path(&amp;self) -&gt; PathBuf</code>：返回入口代表的完整路径。</li><li><code>metadata(&amp;self) -&gt; Result&lt;Metadata&gt;</code>：返回入口的原始信息。</li><li><code>file_type(&amp;self) -&gt; Result&lt;FileType&gt;</code>:返回条目所在的文件类型。</li><li><code>file_name(&amp;self) -&gt; OsString</code>：返回条目的文件名称。</li><li>``<br>使用示例：</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fs<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> entry <span class="token keyword">in</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">read_dir</span><span class="token punctuation">(</span><span class="token string">"/tmp"</span><span class="token punctuation">)</span>? <span class="token punctuation">{</span>        <span class="token keyword">let</span> dir <span class="token operator">=</span> entry?<span class="token punctuation">;</span>        <span class="token keyword">if</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">metadata</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">println!</span><span class="token punctuation">(</span>                <span class="token string">"当前文件：{:?} 文件类型：{:?} 文件名称:{:?} 权限 :{:?} "</span><span class="token punctuation">,</span>                dir<span class="token punctuation">,</span>                dir<span class="token punctuation">.</span><span class="token function">file_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                dir<span class="token punctuation">.</span><span class="token function">file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                dir<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"当前路径:{:?}"</span><span class="token punctuation">,</span> dir<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>提供访问文件系统中的文件的对象。常见方法：</p><ul><li><code>open&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; Result&lt;File&gt;</code>：尝试以只读方式打开文件。</li><li><code>create&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; Result&lt;File&gt;</code>：以只写方式创建一个文件。</li><li><code>sync_all(&amp;self) -&gt; Result&lt;()&gt;</code>：同步操作系统内部的所有metadata到磁盘。</li><li><code>sync_data(&amp;self) -&gt; Result&lt;()&gt;</code>：和sync_all类似，只是也许不同步原始信息，可以减少磁盘io。</li><li><code>set_len(&amp;self, size: u64) -&gt; Result&lt;()&gt;</code>：截断文件为size长度。</li><li><code>metadata(&amp;self) -&gt; Result&lt;Metadata&gt;</code>:查询文件的meta信息。</li><li><code>try_clone(&amp;self) -&gt; Result&lt;File&gt;</code>:创建一个新的和已知文件句柄共享的File示例。对handle的读、写、seek都将同时影响。</li><li><code>set_permissions(&amp;self, perm: Permissions) -&gt; Result&lt;()&gt;</code>：改变文件的权限。</li></ul><h2 id="实现的常见trait"><a href="#实现的常见trait" class="headerlink" title="实现的常见trait"></a>实现的常见trait</h2><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>fmt函数可以使用fmt格式化输出对象。</li></ul><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><ul><li><code>read(&amp;mut self, buf: &amp;mut [u8]) -&gt; Result&lt;usize&gt;</code>：从源文件读取数据到特定的buffer。</li><li><code>read_to_end(&amp;mut self, buf: &amp;mut Vec&lt;u8&gt;) -&gt; Result&lt;usize&gt;</code>：读源文件直到遇到EOF为止，</li><li><code>read_to_string(&amp;mut self, buf: &amp;mut String) -&gt; Result&lt;usize&gt;</code>：读源文件的所有的字节，将他们加入buf。</li><li><code>read_exact(&amp;mut self, buf: &amp;mut [u8]) -&gt; Result&lt;()&gt;</code>：读特定数量的数据加入buf。</li><li><code>by_ref(&amp;mut self) -&gt; &amp;mut Self where Self: Sized</code>：为读实例创建引用适配器。</li><li><code>bytes(self) -&gt; Bytes&lt;Self&gt; where Self: Sized</code>：转换Read实例为字节迭代器。</li><li><code>chars(self) -&gt; Chars&lt;Self&gt; where Self: Sized,</code>:转换Read实例为char迭代器。</li><li><code>chain&lt;R: Read&gt;(self, next: R) -&gt; Chain&lt;Self, R&gt; where Self: Sized,</code>:当前流和另一个流创建一个链条连接。</li><li><code>take(self, limit: u64) -&gt; Take&lt;Self&gt; where Self: Sized</code>:创建一个从源读取至少limit字节的数据。</li></ul><h3 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h3><ul><li><code>write(&amp;mut self, buf: &amp;[u8]) -&gt; Result&lt;usize&gt;</code>:写buffer到对象中返回写入了多少数据。</li><li><code>flush(&amp;mut self) -&gt; Result&lt;()&gt;</code>:刷新输出流，确保所有的数据都写入目的地。</li><li><code>write_all(&amp;mut self, buf: &amp;[u8]) -&gt; Result&lt;()&gt;</code>:尝试写所有的buf到输出writer。</li><li><code>write_fmt(&amp;mut self, fmt: Arguments) -&gt; Result&lt;()&gt;</code>:按照特定的方式写入writer。</li><li><code>by_ref(&amp;mut self) -&gt; &amp;mut Self where Self: Sized</code>:为Write创建引用实例。</li></ul><h3 id="Seek"><a href="#Seek" class="headerlink" title="Seek"></a>Seek</h3><ul><li><code>seek(&amp;mut self, pos: SeekFrom) -&gt; Result&lt;u64&gt;</code>:在流中以字节为单位跳转pos位置。</li></ul><h3 id="FromFd"><a href="#FromFd" class="headerlink" title="FromFd"></a>FromFd</h3><ul><li><code>from_raw_fd(fd: RawFd) -&gt; File</code>:从原始的文件描述符创建一个File实例（unix）。</li></ul><h3 id="IntoRawFd"><a href="#IntoRawFd" class="headerlink" title="IntoRawFd"></a>IntoRawFd</h3><ul><li><code>into_raw_fd(self) -&gt; RawFd</code>:消耗一个对象返回文件描述符。</li></ul><h3 id="FileExt"><a href="#FileExt" class="headerlink" title="FileExt"></a>FileExt</h3><ul><li><code>read_at(&amp;self, buf: &amp;mut [u8], offset: u64) -&gt; Result&lt;usize&gt;</code>：从给定的流的offset读取一定的字节到buf。</li><li><code>write_at(&amp;self, buf: &amp;[u8], offset: u64) -&gt; Result&lt;usize&gt;</code>:往给定流的offset读写入一定字节。</li></ul><h3 id="AsRawHanfle"><a href="#AsRawHanfle" class="headerlink" title="AsRawHanfle"></a>AsRawHanfle</h3><ul><li><code>as_raw_handle(&amp;self) -&gt; RawHandle</code>:地区原始的hanfle没有任何所有权。</li></ul><h2 id="FileType"><a href="#FileType" class="headerlink" title="FileType"></a>FileType</h2><p>代表每个文件类型的结构体。常见方法：</p><ul><li><code>is_dir(&amp;self) -&gt; bool</code>：是否文件类型为目录。</li><li><code>is_file(&amp;self) -&gt; bool</code>:是否文件类型为文件。</li><li><code>is_symlink(&amp;self) -&gt; bool</code>:是否文件类型为链接。</li></ul><h2 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h2><p>文件的原始信息，常见方法：</p><ul><li><code>file_type(&amp;self) -&gt; FileType</code>:返回metadata的文件类型。</li><li><code>is_dir(&amp;self) -&gt; bool</code>:是否metadata为目录。</li><li><code>is_file(&amp;self) -&gt; bool</code>:是否metadata为文件。</li><li><code>len(&amp;self) -&gt; u64</code>:文件的长度，字节为单位。</li><li><code>permissions(&amp;self) -&gt; Permissions</code>:文件metadata的权限。</li><li><code>modified(&amp;self) -&gt; Result&lt;SystemTime&gt;</code>:文件metadata的最后修改时间。</li><li><code>accessed(&amp;self) -&gt; Result&lt;SystemTime&gt;</code>:返回metadata的最后访问时间。</li><li><code>created(&amp;self) -&gt; Result&lt;SystemTime&gt;</code>:返回metadata的创建时间。</li></ul><h3 id="实现常见的trait"><a href="#实现常见的trait" class="headerlink" title="实现常见的trait"></a>实现常见的trait</h3><h4 id="MetadataExt"><a href="#MetadataExt" class="headerlink" title="MetadataExt"></a>MetadataExt</h4><p>常见方法：</p><ul><li><code>st_dev(&amp;self) -&gt; u64</code>:返回文件的设备ID（linux）。</li><li><code>st_ino(&amp;self) -&gt; u64</code>:返回文件的innode(linux)。</li><li><code>st_mode(&amp;self) -&gt; u32</code>:返回文件的类型和模式（linux）</li><li><code>st_nlink(&amp;self) -&gt; u64</code>：返回文件的硬连接数。</li><li><code>st_uid(&amp;self) -&gt; u32</code>:返回文件拥有者的用户ID。</li><li><code>st_gid(&amp;self) -&gt; u32</code>:返回文件的组id。</li><li><code>st_rdev(&amp;self) -&gt; u64</code>：返回文件代表的设备ID。仅仅用于特殊文件。</li><li><code>st_size(&amp;self) -&gt; u64</code>:返回文件（符号链接或者正常文件）的大小（字节单位）。</li><li><code>st_atime(&amp;self) -&gt; i64</code>:返回文件的最后访问时间。</li><li><code>st_atime_nsec(&amp;self) -&gt; i64</code>:返回文件的最后访问时间（纳秒单位）。</li><li><code>st_mtime(&amp;self) -&gt; i64</code>:返回文件的最后修改时间。</li><li><code>st_mtime_nsec(&amp;self) -&gt; i64</code>:返回文件的最后修改时间，纳米单位。</li><li><code>st_ctime(&amp;self) -&gt; i64</code>:返回文件最后状态改变的时间。</li><li><code>st_ctime_nsec(&amp;self) -&gt; i64</code>:返回文件最后状态改变时间，纳秒单位。</li><li><code>st_blksize(&amp;self) -&gt; u64</code>:返回搞笑文件系统IO的blocksize。</li><li><code>st_blocks(&amp;self) -&gt; u64</code>：返回分配文件的block数，512字节为单位。</li></ul><h4 id="仅仅支持unix"><a href="#仅仅支持unix" class="headerlink" title="仅仅支持unix"></a>仅仅支持unix</h4><ul><li><code>dev(&amp;self) -&gt; u64</code>:返回包含文件的设备ID。</li><li><code>ino(&amp;self) -&gt; u64</code>:返回inode。</li><li><code>mode</code>:返回应用到文件的权限。</li><li><code>nlink(&amp;self) -&gt; u64</code>:返回指向文件的硬链接数。</li><li><code>uid(&amp;self) -&gt; u32</code>:返回文件的uid。</li><li><code>gid(&amp;self) -&gt; u32</code>:返回文件的gid。</li><li><code>rdev(&amp;self) -&gt; u64</code>:返回文件的设备ID。</li><li><code>size(&amp;self) -&gt; u64</code>：返回文件的大小，字节为单位。</li><li><code>atime(&amp;self) -&gt; i64</code>:返回文件的最后访问时间。</li><li><code>atime_nsec(&amp;self) -&gt; i64</code>:返回文件的最后访问时间，纳秒单位。</li><li><code>mtime(&amp;self) -&gt; i64</code>:返回文件的最后修改时间。</li><li><code>mtime_nsec(&amp;self) -&gt; i64</code>:返回文件的最后修改时间，纳秒单位。</li><li><code>ctime(&amp;self) -&gt; i64</code>:返回文件最后状态修改的时间。</li><li><code>ctime_nsec(&amp;self) -&gt; i64</code>:返回文件最后状态修改的时间，纳秒单位。</li><li><code>blksize(&amp;self) -&gt; u64</code>:文件的块大小。</li><li><code>blocks(&amp;self) -&gt; u64</code>:返回文件分配的块数，512字节为单位。</li></ul><h2 id="OpenOptions"><a href="#OpenOptions" class="headerlink" title="OpenOptions"></a>OpenOptions</h2><p>关于文件如何打开的选项和flags。</p><ul><li><code>new() -&gt; OpenOptions</code>:创建一个空的打开选项。</li><li><code>read(&amp;mut self, read: bool) -&gt; &amp;mut OpenOptions</code>:设置打开选项为读。</li><li><code>write(&amp;mut self, write: bool) -&gt; &amp;mut OpenOptions</code>:设置打开选项为写。</li><li><code>append(&amp;mut self, append: bool) -&gt; &amp;mut OpenOptions</code>:设置打开选项为添加。</li><li><code>truncate(&amp;mut self, truncate: bool) -&gt; &amp;mut OpenOptions</code>:设置打开选项为截断。如果文件存在且截断打开文件将被截断为0。</li><li><code>create(&amp;mut self, create: bool) -&gt; &amp;mut OpenOptions</code>:为新文件创建打开选项。为了创建新文件，write或者append必须打开。</li><li><code>create_new(&amp;mut self, create_new: bool) -&gt; &amp;mut OpenOptions</code>:设置打开选项为总是创建一个新文件，文件不应该存在。如果设置这个选项则cteate和truncate将被忽略。</li><li><code>open&lt;P: AsRef&lt;Path&gt;&gt;(&amp;self, path: P) -&gt; Result&lt;File&gt;</code>:打开文件选项。</li></ul><h2 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h2><p>代表文件的权限。</p><ul><li><code>readonly(&amp;self) -&gt; bool</code>:返回描述权限是否为只读。</li><li><code>set_readonly(&amp;mut self, readonly: bool)</code>:修改文件的权限为只读。</li></ul><h2 id="ReadDir"><a href="#ReadDir" class="headerlink" title="ReadDir"></a>ReadDir</h2><p>目录条目的迭代器。</p>]]></content>
      
      
      <categories>
          
          <category> rust基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础(常见的标准宏)</title>
      <link href="/2023/09/12/rust-ji-chu-chang-jian-de-biao-zhun-hong/"/>
      <url>/2023/09/12/rust-ji-chu-chang-jian-de-biao-zhun-hong/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust中的标准宏"><a href="#Rust中的标准宏" class="headerlink" title="Rust中的标准宏"></a>Rust中的标准宏</h1><table><thead><tr><th>宏名称</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>concat_bytes</td><td>拼接字面量为一个字节切片Experimental Concatenates literals into a byte slice.</td><td>实验性(需要nightly版本)</td></tr><tr><td>concat_idents</td><td>拼接多个标识符为一个Experimental Concatenates identifiers into one identifier.</td><td>实验性</td></tr><tr><td>const_format_args</td><td>Experimental Same as format_args, but can be used in some const contexts.</td><td>实验性</td></tr><tr><td>format_args_nl</td><td>Experimental Same as format_args, but adds a newline in the end.</td><td>实验性</td></tr><tr><td>log_syntax</td><td>Experimental Prints passed tokens into the standard output.</td><td>实验性</td></tr><tr><td>trace_macros</td><td>Experimental Enables or disables tracing functionality used for debugging other macros.</td><td>实验性</td></tr><tr><td>assert</td><td>Asserts that a boolean expression is true at runtime.</td><td></td></tr><tr><td>assert_eq</td><td>Asserts that two expressions are equal to each other (using PartialEq).</td><td></td></tr><tr><td>assert_ne</td><td>Asserts that two expressions are not equal to each other (using PartialEq).</td><td></td></tr><tr><td>cfg</td><td>Evaluates boolean combinations of configuration flags at compile-time.</td><td></td></tr><tr><td>column</td><td>Expands to the column number at which it was invoked.</td><td></td></tr><tr><td>compile_error</td><td>Causes compilation to fail with the given error message when encountered.</td><td></td></tr><tr><td>concat</td><td>Concatenates literals into a static string slice.</td><td></td></tr><tr><td>dbg</td><td>Prints and returns the value of a given expression for quick and dirty debugging.</td><td></td></tr><tr><td>debug_assert</td><td>Asserts that a boolean expression is true at runtime.</td><td></td></tr><tr><td>debug_assert_eq</td><td>Asserts that two expressions are equal to each other.</td><td></td></tr><tr><td>debug_assert_ne</td><td>Asserts that two expressions are not equal to each other.</td><td></td></tr><tr><td>env</td><td>Inspects an environment variable at compile time.</td><td></td></tr><tr><td>eprint</td><td>打印标准错误Prints to the standard error.</td><td></td></tr><tr><td>eprintln</td><td>打印标准错误（一行行打印）Prints to the standard error, with a newline.</td><td></td></tr><tr><td>file</td><td>在调用处扩展文件名称Expands to the file name in which it was invoked.</td><td></td></tr><tr><td>format</td><td>Creates a String using interpolation of runtime expressions.</td><td></td></tr><tr><td>format_args</td><td>Constructs parameters for the other string-formatting macros.</td><td></td></tr><tr><td>include</td><td>Parses a file as an expression or an item according to the context.</td><td></td></tr><tr><td>include_bytes</td><td>Includes a file as a reference to a byte array.</td><td></td></tr><tr><td>include_str</td><td>Includes a UTF-8 encoded file as a string.</td><td></td></tr><tr><td>is_x86_feature_detected</td><td>x86 or x86-64 A macro to test at runtime whether a CPU feature is available on x86/x86-64 platforms.</td><td></td></tr><tr><td>line</td><td>Expands to the line number on which it was invoked.</td><td></td></tr><tr><td>matches</td><td>Returns whether the given expression matches any of the given patterns.</td><td></td></tr><tr><td>module_path</td><td>Expands to a string that represents the current module path.</td><td></td></tr><tr><td>option_env</td><td>Optionally inspects an environment variable at compile time.</td><td></td></tr><tr><td>panic</td><td>Panics the current thread.</td><td></td></tr><tr><td>print</td><td>Prints to the standard output.</td><td></td></tr><tr><td>println</td><td>Prints to the standard output, with a newline.</td><td></td></tr><tr><td>stringify</td><td>Stringifies its arguments.</td><td></td></tr><tr><td>thread_local</td><td>Declare a new thread local storage key of type std::thread::LocalKey.</td><td></td></tr><tr><td>todo</td><td>Indicates unfinished code.</td><td></td></tr><tr><td>tryDeprecated</td><td>Unwraps a result or propagates its error.</td><td></td></tr><tr><td>unimplemented</td><td>Indicates unimplemented code by panicking with a message of “not implemented”.</td><td></td></tr><tr><td>unreachable</td><td>Indicates unreachable code.</td><td></td></tr><tr><td>vec</td><td>Creates a Vec containing the arguments.</td><td></td></tr><tr><td>write</td><td>Writes formatted data into a buffer.</td><td></td></tr><tr><td>writeln</td><td>Write formatted data into a buffer, with a newline appended.</td><td></td></tr></tbody></table><h2 id="cancat-bytes示例"><a href="#cancat-bytes示例" class="headerlink" title="cancat_bytes示例"></a>cancat_bytes示例</h2><p>宏实现原型：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token attribute attr-name">#![feature(concat_bytes)]</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>u8<span class="token punctuation">;</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">concat_bytes!</span><span class="token punctuation">(</span><span class="token string">b'A'</span><span class="token punctuation">,</span> <span class="token string">b"BC"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token string">b'E'</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">b"ABCDEF"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>rustc 1.72.0 (5680fa18f 2023-08-23) 不可用</p></blockquote><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p>宏原型：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token macro-rules function">macro_rules!</span> assert <span class="token punctuation">{</span>    <span class="token punctuation">(</span>$cond<span class="token punctuation">:</span>expr $<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>$cond<span class="token punctuation">:</span>expr<span class="token punctuation">,</span> $<span class="token punctuation">(</span>$arg<span class="token punctuation">:</span>tt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在运行时断言bool表达式为真。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assert!</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">assert!</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用自定义的格式输出断言信息</span>    <span class="token function">assert!</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"a = {} ,b = {},but now error is = {}"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash"><code class="language-bash">thread <span class="token string">'main'</span> panicked at <span class="token string">'a = 1 ,b = 1,but now error is = 3'</span>, src/main.rs:2:5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，assert在release和debug版本都会输出，如果需要release版本禁用则可以使用<code>debug_assert!</code>宏。</p><h2 id="assert-eq"><a href="#assert-eq" class="headerlink" title="assert_eq"></a>assert_eq</h2><p>判断表达式是否相等，和assert一样可以定义输出格式，等于的比较需要实现。宏原型：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token macro-rules function">macro_rules!</span> assert_eq <span class="token punctuation">{</span>    <span class="token punctuation">(</span>$left<span class="token punctuation">:</span>expr<span class="token punctuation">,</span> $right<span class="token punctuation">:</span>expr $<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>$left<span class="token punctuation">:</span>expr<span class="token punctuation">,</span> $right<span class="token punctuation">:</span>expr<span class="token punctuation">,</span> $<span class="token punctuation">(</span>$arg<span class="token punctuation">:</span>tt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"we are testing addition with {} and {}"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="assert-ne"><a href="#assert-ne" class="headerlink" title="assert_ne"></a>assert_ne</h2><p>对比两个表达式是否不相等（实现<code>PartialEq</code>），和assert一样可以定义panic格式，<br>assert_ne宏定义：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token macro-rules function">macro_rules!</span> assert_ne <span class="token punctuation">{</span>    <span class="token punctuation">(</span>$left<span class="token punctuation">:</span>expr<span class="token punctuation">,</span> $right<span class="token punctuation">:</span>expr $<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>$left<span class="token punctuation">:</span>expr<span class="token punctuation">,</span> $right<span class="token punctuation">:</span>expr<span class="token punctuation">,</span> $<span class="token punctuation">(</span>$arg<span class="token punctuation">:</span>tt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"1 和 2 本身并不相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-rust"><code class="language-rust">thread <span class="token string">'main'</span> panicked at 'assertion failed<span class="token punctuation">:</span> `<span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span>`  left<span class="token punctuation">:</span> `<span class="token number">1</span>`<span class="token punctuation">,</span> right<span class="token punctuation">:</span> `<span class="token number">2</span>`<span class="token punctuation">:</span> <span class="token number">1</span> 和 <span class="token number">2</span> 本身并不相等'<span class="token punctuation">,</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cfg"><a href="#cfg" class="headerlink" title="cfg"></a>cfg</h2><p>编译期计算表达式，宏定义：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token macro-rules function">macro_rules!</span> cfg <span class="token punctuation">{</span>    <span class="token punctuation">(</span>$<span class="token punctuation">(</span>$cfg<span class="token punctuation">:</span>tt<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>#[cfg]</code>用于提供编译期计算表达式的值。<code>cfg!</code>和<code>#[cfg]</code>不同，不移除任何代码仅仅计算表达式的bool值是true还是false。所有的分支都需要能被计算。使用demo：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token punctuation">{</span>    <span class="token keyword">let</span> os <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token function">cfg!</span><span class="token punctuation">(</span>target_os <span class="token operator">=</span> <span class="token string">"macos"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">cfg!</span><span class="token punctuation">(</span>target_os <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">"unix家族系统"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token string">"windows"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"当前系统为:{}"</span><span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="column"><a href="#column" class="headerlink" title="column"></a>column</h2><p>用宏主要用于调试代码时提供列号。示例：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"foobar"</span><span class="token punctuation">,</span> <span class="token function">column!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"人之初性本善"</span><span class="token punctuation">,</span> <span class="token function">column!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"f̅o̅o̅b̅a̅r̅"</span><span class="token punctuation">,</span> <span class="token function">column!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uses combining overline (U+0305)</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token function">column!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"内容:{} 位置 = {}"</span><span class="token punctuation">,</span> d<span class="token number">.0</span><span class="token punctuation">,</span> d<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"a = {} b = {} c = {}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_ne!</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="compile-error"><a href="#compile-error" class="headerlink" title="compile_error"></a>compile_error</h2><p>这歌宏主要用于条件编译时提供更好的错误信息，宏定义如：</p><pre class="line-numbers language-rust"><code class="language-rust"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的代码中，我们定义了一个宏，<code>give_me_foo_or_bar</code>，如果传入的参数为<code>foo</code>或者<code>bar</code>则表达式为<code>{}</code>否则报错：”This macro only accepts <code>foo</code> or <code>bar</code>“。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token macro-rules function">macro_rules!</span> give_me_foo_or_bar <span class="token punctuation">{</span>    <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>$x<span class="token punctuation">:</span>ident<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">compile_error!</span><span class="token punctuation">(</span><span class="token string">"This macro only accepts `foo` or `bar`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">give_me_foo_or_bar!</span><span class="token punctuation">(</span>neither<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过cfg控制编译输出：</p><pre class="line-numbers language-rust"><code class="language-rust">#<span class="token punctuation">[</span><span class="token function">cfg</span><span class="token punctuation">(</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span>feature <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> feature <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token function">compile_error!</span><span class="token punctuation">(</span><span class="token string">"Either feature \"foo\" or \"bar\" must be enabled for this crate."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中any表示任何一个为false则为false，<code>not(any(feature = &quot;foo&quot;, feature = &quot;bar&quot;))</code>表示存在<code>foo</code>或者<code>bar</code>为false。</p><h2 id="cancat"><a href="#cancat" class="headerlink" title="cancat"></a>cancat</h2><p>连接字面量为静态字符串切片，宏定义：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token macro-rules function">macro_rules!</span> concat <span class="token punctuation">{</span>    <span class="token punctuation">(</span>$<span class="token punctuation">(</span>$e<span class="token punctuation">:</span>expr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> $<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>concat示例：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">concat!</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"test10btrue1.23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dbg"><a href="#dbg" class="headerlink" title="dbg"></a>dbg</h2><p>打印同时返回表达式的值。宏定义：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token macro-rules function">macro_rules!</span> dbg <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>$val<span class="token punctuation">:</span>expr $<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>$<span class="token punctuation">(</span>$val<span class="token punctuation">:</span>expr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">+</span> $<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>debug函数：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> u32<span class="token punctuation">)</span> <span class="token punctuation">-></span> u32 <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">dbg!</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dbg!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">dbg!</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dbg!</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中我们对，阶乘计算函数检查，输入参数为4的时候，走判断n的分支，4&lt;=1为false，则输出结果，接着走else分支调用4<em>factorial(3)，将结果给dbg计算，然后对factorial(3)继续计算，反复如此到对factorial(1)的计算，此时if分支满足，进入内部输出1 = 1，然后计算`n</em>factorial(n-1)`，直到输出所有的计算为止，输出：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>src/main.rs:3<span class="token punctuation">]</span> n <span class="token operator">&lt;=</span> 1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>src/main.rs:3<span class="token punctuation">]</span> n <span class="token operator">&lt;=</span> 1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>src/main.rs:3<span class="token punctuation">]</span> n <span class="token operator">&lt;=</span> 1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>src/main.rs:3<span class="token punctuation">]</span> n <span class="token operator">&lt;=</span> 1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>src/main.rs:4<span class="token punctuation">]</span> 1 <span class="token operator">=</span> 1<span class="token punctuation">[</span>src/main.rs:6<span class="token punctuation">]</span> n * factorial<span class="token punctuation">(</span>n - 1<span class="token punctuation">)</span> <span class="token operator">=</span> 2<span class="token punctuation">[</span>src/main.rs:6<span class="token punctuation">]</span> n * factorial<span class="token punctuation">(</span>n - 1<span class="token punctuation">)</span> <span class="token operator">=</span> 6<span class="token punctuation">[</span>src/main.rs:6<span class="token punctuation">]</span> n * factorial<span class="token punctuation">(</span>n - 1<span class="token punctuation">)</span> <span class="token operator">=</span> 24<span class="token punctuation">[</span>src/main.rs:10<span class="token punctuation">]</span> factorial<span class="token punctuation">(</span>4<span class="token punctuation">)</span> <span class="token operator">=</span> 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移动、多输入示例：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token attribute attr-name">#[derive(Debug)]</span>    <span class="token keyword">struct</span> <span class="token function">NoCopy</span><span class="token punctuation">(</span>usize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">NoCopy</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token function">dbg!</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- `a` 已经被dbg移走</span>                     <span class="token comment" spellcheck="true">//    let _ = dbg!(a); // &lt;-- `a` a的生命周期已经消失，再次move编译报错; error!</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span><span class="token function">dbg!</span><span class="token punctuation">(</span>1usize<span class="token punctuation">,</span> <span class="token number">2u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//多参数将被当做tuple</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">dbg!</span><span class="token punctuation">(</span><span class="token number">1u32</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tuple中单个参数依然被当做单个元素</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础(Option)</title>
      <link href="/2023/09/11/rust-ji-chu-option/"/>
      <url>/2023/09/11/rust-ji-chu-option/</url>
      
        <content type="html"><![CDATA[<p>Option 表示值，如果有值则Some包装其值，否则返回None。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> f32<span class="token punctuation">,</span> b<span class="token punctuation">:</span> f32<span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>f32<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0.0f32</span> <span class="token punctuation">{</span>        None    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">Some</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1.0f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2.0f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0.0f32</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"r = {:?}"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"divide zero = {:?}"</span><span class="token punctuation">,</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rust指针必须指向可用的位置，不是为null引用。比较之下，Rust有一个Option指针，类似于Option&lt;Box<t>&gt;。在下面的例子，使用i32的Box创建一个Option。通过模式匹配实现对不同情况的处理：</t></p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">check_optional</span><span class="token punctuation">(</span>optional<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>Box<span class="token operator">&lt;</span>i32<span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">match</span> optional <span class="token punctuation">{</span>        <span class="token function">Some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"解引用里面的值:{p}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        None <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token macro-rules function">println!</span> <span class="token punctuation">{</span><span class="token string">"Optional为空"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> optional1 <span class="token operator">=</span> None<span class="token punctuation">;</span>    <span class="token function">check_optional</span><span class="token punctuation">(</span>optional1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> optional2 <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span>Box<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check_optional</span><span class="token punctuation">(</span>optional2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Option的简化操作，如果我们要对向量中最后两个元素求和：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">add_last_numbers</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> Vec<span class="token operator">&lt;</span>i32<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token function">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Some</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=</span><span class="token operator">></span> None<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">add_last_numbers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"b = {:?}"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">add_last_numbers</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> Vec<span class="token operator">&lt;</span>i32<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>? <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>?<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>?</code>表达式将对<code>Some</code>解包，如果是None则结果还是None。这样就不用对Option的值层层匹配避免冗余操作。</p><h2 id="Option常用方法"><a href="#Option常用方法" class="headerlink" title="Option常用方法"></a>Option常用方法</h2><ul><li><code>as_ref</code>:将<code>&amp;Option&lt;T&gt;</code>转换为<code>Option&lt;&amp;T&gt;</code>。</li><li><code>as_mut</code>:转换&amp;mut Option<t>为Option&lt;&amp;mut T&gt;。</t></li><li><code>as_deref</code>：转换&amp;Option<t>为Option&lt;&amp;T::Target&gt;。</t></li><li><code>as_deref_mut</code>：转换<code>&amp;mut Option&lt;T&gt;</code> 为 <code>Option&lt;&amp;mut T::Target&gt;</code>。</li><li><code>as_pin_ref</code>：转换<code>Pin&lt;&amp;Option&lt;T&gt;</code>为<code>Option&lt;Pin&lt;&amp;T&gt;</code>。</li><li><code>as_pin_ref</code>：转换<code>Pin&lt;&amp;Option&lt;T&gt;&gt;</code>为<code>Option&lt;Pin&lt;&amp;T&gt;&gt;</code>。</li><li><code>as_pin_mut</code>：转换<code>Pin&lt;&amp;mut Option&lt;T&gt;&gt;</code>为<code>Option&lt;Pin&lt;&amp;mut T&gt;&gt;</code>。</li><li><code>expect</code>：如果为None则爆出给定的错误信息。</li><li><code>unwrap</code>：如果为None则爆出错误信息否则解包Option里面的元素。</li><li><code>unwrap_or</code>：如果为None则返回给定的值，否则解包。</li><li><code>unwrap_or_default</code>：返回类型<code>T</code>的默认值。</li><li><code>unwrap_or_else</code>：返回提供的值。是</li><li><code>ok_or</code>：转换<code>Some(b)</code>为<code>Ok(b)</code>，<code>None</code>为<code>Err(err)</code>。</li><li><code>ok_or_else</code>：转换<code>Some(v)</code>为<code>Ok(v)</code>、<code>None</code>为<code>Err</code>的值。</li><li><code>transpose</code>：转换<code>Option</code>的结果为Result。</li><li><code>filter</code>：对Some(t)的t调用函数，如果为Option包含值则函数返回True，否则返回None。</li><li><code>map</code>:使用提供的函数转换Option<t>为Option<u>，如果Option为Some则映射转换否则返回None。</u></t></li><li><code>map_or</code>：如果Option是Some则返回Some的值，否则返回默认值。</li><li><code>map_or_else</code>：如果是Some则使用函数，否则返回callback函数的调用结果。</li><li><code>zip</code>：如果self是<code>Some(s)</code>提供了<code>Option(o)</code>返回<code>Some((s,o))</code>，否则返回None。</li><li><code>zip_with</code>:调用提供的函数，如果Option是<code>Some(o)</code>提供的<code>Some(s)</code>则返回<code>Some(f(s,o))</code>，否则返回None。</li></ul><p>逻辑运算：</p><table><thead><tr><th>方法</th><th>self（Option本身）</th><th>运算输入</th><th>运算输出</th></tr></thead><tbody><tr><td>and</td><td>None</td><td>ignore（表示无论是什么输出都一样）</td><td>None</td></tr><tr><td>and</td><td>Some(x)</td><td>None</td><td>None</td></tr><tr><td>and</td><td>Some(x)</td><td>Some(y)</td><td>Some(y)</td></tr><tr><td>or</td><td>None</td><td>None</td><td>None</td></tr><tr><td>or</td><td>None</td><td>Some(y)</td><td>Some(y)</td></tr><tr><td>or</td><td>Some(x)</td><td>ignore</td><td>Some(x)</td></tr><tr><td>xor</td><td>None</td><td>None</td><td>None</td></tr><tr><td>xor</td><td>None</td><td>Some(y)</td><td>Some(y)</td></tr><tr><td>xor</td><td>Some(x)</td><td>None</td><td>Some(x)</td></tr><tr><td>xor</td><td>Some(x)</td><td>Some(y)</td><td>None</td></tr></tbody></table><p>and_then和or_else方法接受函数输入，当有值的时候产生一个新的值，and_then方法生成一个Option<u>不同于原来的Option<t>类型。</t></u></p><table><thead><tr><th>方法</th><th>self</th><th>function输入</th><th>function result</th><th>输出</th></tr></thead><tbody><tr><td>and_then</td><td>None</td><td>无输入</td><td>无计算</td><td>None</td></tr><tr><td>and_then</td><td>Some(x)</td><td>x</td><td>None</td><td>None</td></tr><tr><td>and_then</td><td>Some(x)</td><td>x</td><td>Some(y)</td><td>Some(y)</td></tr><tr><td>or_else</td><td>None</td><td>无输入</td><td>None</td><td>None</td></tr><tr><td>or_else</td><td>None</td><td>无输入</td><td>Some(y)</td><td>Some(y)</td></tr><tr><td>or_else</td><td>Some(x)</td><td>无输入</td><td>无计算</td><td>Some(x)</td></tr></tbody></table><p>and_then或者是or_else常用在pipeline调用的场景，pipeline中的一个状态计算失败则传递None，否则继续处理Some里面的值。</p><p>比较运算符：<br>如果T本身实现了PartialOrd然后Option<t>将继承它的PartialOrd。结合这个顺序，None&lt;Some，两个Some使用同昂的方法比较的时候比较的是其中的值。如果T也实现了Ord，然后可以Option<t>也是相同的道理。</t></t></p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token function">assert!</span><span class="token punctuation">(</span>None <span class="token operator">&lt;</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert!</span><span class="token punctuation">(</span><span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在Option上迭代：</p><ul><li>into_iter：消耗Option，生成其中包含的值。</li><li>iter:生成一个无法修改的&amp;T的值。</li><li>iter_mut:生成一个可变值的引用。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> yep <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> nope <span class="token operator">=</span> None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//chain方法调用into_iter生成迭代器，这里yep为Some(4)则将4取出</span>    <span class="token keyword">let</span> nums<span class="token punctuation">:</span> Vec<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>yep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">..</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//chain方法调用into_iter生成迭代器，这里Nope为None则无法取出。</span>    <span class="token keyword">let</span> nums1<span class="token punctuation">:</span> Vec<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>nope<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">..</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Option 实现了FromIterator trait：可以在Option的值上收集值进一个Option集合，如果Option本身有任何一个元素为None则结果为None。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>Vec<span class="token operator">&lt;</span>_<span class="token operator">>></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含一个None</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>Vec<span class="token operator">&lt;</span>_<span class="token operator">>></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert_eq!</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token function">vec!</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Option也实现了Product和Sumt rait，允许Option里面的元素累积和累和。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> res<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含有None，求和为None</span><span class="token function">assert_eq!</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> res<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>i32<span class="token operator">></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert_eq!</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原位修改Option：</p><ul><li>insert：插入一个值，删除老值。</li><li>get_or_insert：获取当前值，如果为None则插入提供的值。</li><li>get_or_insert_default：获取当前值，插入T类型的默认值（必须实现Default）。</li><li>get_or_insert_with：获取当前值插入，如果为None则默认函数计算值。<br>转换Option值的所有权：</li><li>take：获取Option的值得所有权，如果Option为None的使用None替代。</li><li>replace：获取Option值的所有权，如果有任何元素，使用Some(value)替代。</li></ul><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span><span class="token string">"howdy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Take a reference to the contained string</span><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token function">Some</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>msg <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Remove the contained string, destroying the Option</span><span class="token keyword">let</span> unwrapped_msg <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">"default message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环之前初始化结果为None：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> Kingdom <span class="token punctuation">{</span> <span class="token function">Plant</span><span class="token punctuation">(</span>u32<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token string">'static str), Animal(u32, &amp;'</span><span class="token keyword">static</span> str<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// A list of data to search through.</span><span class="token keyword">let</span> all_the_big_things <span class="token operator">=</span> <span class="token punctuation">[</span>    Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Plant</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token string">"redwood"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Plant</span><span class="token punctuation">(</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token string">"noble fir"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Plant</span><span class="token punctuation">(</span><span class="token number">229</span><span class="token punctuation">,</span> <span class="token string">"sugar pine"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"blue whale"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"fin whale"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">"north pacific right whale"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// We're going to search for the name of the biggest animal,</span><span class="token comment" spellcheck="true">// but to start with we've just got `None`.</span><span class="token keyword">let</span> <span class="token keyword">mut</span> name_of_biggest_animal <span class="token operator">=</span> None<span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">mut</span> size_of_biggest_animal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> big_thing <span class="token keyword">in</span> <span class="token operator">&amp;</span>all_the_big_things <span class="token punctuation">{</span>    <span class="token keyword">match</span> <span class="token operator">*</span>big_thing <span class="token punctuation">{</span>        Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Animal</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">if</span> size <span class="token operator">></span> size_of_biggest_animal <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Now we've found the name of some big animal</span>            size_of_biggest_animal <span class="token operator">=</span> size<span class="token punctuation">;</span>            name_of_biggest_animal <span class="token operator">=</span> <span class="token function">Some</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token operator">|</span> Kingdom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Plant</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">match</span> name_of_biggest_animal <span class="token punctuation">{</span>    <span class="token function">Some</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"the biggest animal is {name}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    None <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"there are no animals :("</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>is_some</code>:判断Option是否为Some。</li></ul>]]></content>
      
      
      <categories>
          
          <category> rust编程、rust基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust、Option </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust三方库-actix</title>
      <link href="/2023/09/10/rust-san-fang-ku-actix/"/>
      <url>/2023/09/10/rust-san-fang-ku-actix/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1384026889&auto=1&height=66"></iframe></div><h1 id="Actix"><a href="#Actix" class="headerlink" title="Actix"></a>Actix</h1><p>Actix 是一个Rust异步Webserver，它提供了构建webserver需要的多种能力，包括路由、中间件、请求预处理、相应后处理等等。所有的actix server均围绕App构建，用于为资源和中间件注册路由。在相同的scope里面的所有handler存储程序状态。scope类似于所有路由的namespace。应用程序总是以<code>/</code>开始，如果没有这个prefix系统将自动加入。这个prefix将由路径段组成。例如：<code>/app</code>开头的scope，任何<code>/app</code>或者<code>/app/test</code>都将匹配路由。但是<code>/application</code>将不会匹配。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">,</span> Responder<span class="token punctuation">}</span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> Responder <span class="token punctuation">{</span>    <span class="token string">"hello world"</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码我们声明了一个scope叫做<code>app</code>，然后路由<code>index.html</code>，路由相应函数为index。我们可以使用：<code>curl -X GET http://127.0.0.1:8888/app/index.html</code>访问并获取index()函数输出<code>hello world</code>。</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>在一个scope下应用程序状态在所有路由和资源之间共享，状态可以通过<code>web::Data&lt;T&gt;</code>访问，这里的T是状态的类型。状态对中间件也是可以访问的。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> AppState <span class="token punctuation">{</span>    app_name<span class="token punctuation">:</span> String<span class="token punctuation">,</span><span class="token punctuation">}</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Data<span class="token operator">&lt;</span>AppState<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    <span class="token keyword">let</span> app_name <span class="token operator">=</span> <span class="token operator">&amp;</span>data<span class="token punctuation">.</span>app_name<span class="token punctuation">;</span>    <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"Hello {app_name}"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">app_data</span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span>Data<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>AppState <span class="token punctuation">{</span>                app_name<span class="token punctuation">:</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Actix web"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中我们定义了一个结构体<code>AppState</code>用来存储用户的APP名称信息。HttpServer启动的时候创建了一个实例，实例通过<code>web::Data::new()</code>构造。然后service实现对<code>/</code>路由的绑定index，index会对拿到的web::Data结构体输出内容格式化返回输出。我们可以<code>curl -X GET http://127.0.0.1:8888</code>获取<code>/</code>路由的输出<code>Hello Actix web</code>。</p><h3 id="可修改的共享状态"><a href="#可修改的共享状态" class="headerlink" title="可修改的共享状态"></a>可修改的共享状态</h3><p>HttpServer更愿意接受一个应用程序工厂。一个HttpServer为每个线程构建一个应用。因此应用程序的数据可能被多次构建，不同的线程间共享对象需要实现Send+Sync trait。web::Data内部使用Arc，为了避免创建两个Arc。我们应该在使用<code>App::app_data</code>之前注册它。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>sync<span class="token punctuation">:</span><span class="token punctuation">:</span>Mutex<span class="token punctuation">;</span><span class="token keyword">struct</span> AppStateWithCounter <span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> Mutex<span class="token operator">&lt;</span>i32<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程锁</span><span class="token punctuation">}</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Data<span class="token operator">&lt;</span>AppStateWithCounter<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> data<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">format!</span><span class="token punctuation">(</span><span class="token string">"请求次数: {counter}"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span>Data<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>AppStateWithCounter <span class="token punctuation">{</span>        counter<span class="token punctuation">:</span> Mutex<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// move counter into the closure</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">app_data</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;- register the created data</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中:</p><ol><li>状态在闭包中传给HttpServer::new的本地工作线程如果被修改则会同步。</li><li>为了获得全局的共享状态，它必须在闭包外部创建然后传入HttpServer::new然后move或者clone它。</li></ol><h2 id="使用Application-Scope整合应用"><a href="#使用Application-Scope整合应用" class="headerlink" title="使用Application Scope整合应用"></a>使用Application Scope整合应用</h2><p>web::scope()方法允许设置资源组prefix。代表它将被加入资源配置的前面，通过它可以挂在一些不同位置的资源，同时保证资源的名称好访问。</p><h2 id="应用guard和virtual-hosing"><a href="#应用guard和virtual-hosing" class="headerlink" title="应用guard和virtual hosing"></a>应用guard和virtual hosing</h2><p>你可以认为guard是一个接受request对象返回true或者false的简单函数。一个guard实现了Guard trait。Actix web提供了一些guard，一个常见的guards是Host。他可以用作请求头信息的filter。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token punctuation">|</span><span class="token punctuation">|</span></span> <span class="token punctuation">{</span>        App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>                web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Host</span><span class="token punctuation">(</span><span class="token string">"www.rust-lang.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token operator">||</span> async <span class="token punctuation">{</span> HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>                web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">(</span>guard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Host</span><span class="token punctuation">(</span><span class="token string">"users.rust-lang.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token operator">||</span> async <span class="token punctuation">{</span> HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span>Ok<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h2><p>简化和重用App和web::Scope提供了配置方法。这个函数用于移动配置的一部分到不同的module或者库。</p><pre class="line-numbers language-rust"><code class="language-rust"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="请求handler"><a href="#请求handler" class="headerlink" title="请求handler"></a>请求handler</h2><p>请求handler是一个异步函数，从请求中接收0或者更多参数返回一个可以被转换为HttpResponse类型。请求handling发生在两个阶段，首先handler对象调用返回任意实现了Respinder的trait，然后respond_to()调用转换其为HttpResponse或者Error。<br>默认Actix web提供了对一些标准类型的Responder实现。比如<code>&amp;&#39;static str&#39;、String</code>等等。可用handder的例子：</p><pre class="line-numbers language-rust"><code class="language-rust">async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>_req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span>'<span class="token keyword">static</span> str <span class="token punctuation">{</span>    <span class="token string">"Hello world!"</span><span class="token punctuation">}</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>_req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    <span class="token string">"Hello world!"</span><span class="token punctuation">.</span><span class="token function">to_owned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>_req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> Responder <span class="token punctuation">{</span>    web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">b"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> Box<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>Item<span class="token operator">=</span>HttpResponse<span class="token punctuation">,</span> Error<span class="token operator">=</span>Error<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token punctuation">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义类型的相应"><a href="#自定义类型的相应" class="headerlink" title="自定义类型的相应"></a>自定义类型的相应</h3><p>为了直接从handler函数返回自定义类型，类型需要实现Responder trait。创建一个自订立类型序列化为<code>application/json</code>的相应：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    body<span class="token punctuation">:</span><span class="token punctuation">:</span>BoxBody<span class="token punctuation">,</span> http<span class="token punctuation">:</span><span class="token punctuation">:</span>header<span class="token punctuation">:</span><span class="token punctuation">:</span>ContentType<span class="token punctuation">,</span> HttpRequest<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> Responder<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> serde<span class="token punctuation">:</span><span class="token punctuation">:</span>Serialize<span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Serialize)]</span><span class="token keyword">struct</span> MyObj <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Responder</span><span class="token keyword">impl</span> Responder <span class="token keyword">for</span> MyObj <span class="token punctuation">{</span>    <span class="token keyword">type</span> Body <span class="token operator">=</span> BoxBody<span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function">respond_to</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> _req<span class="token punctuation">:</span> <span class="token operator">&amp;</span>HttpRequest<span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse<span class="token operator">&lt;</span>Self<span class="token punctuation">:</span><span class="token punctuation">:</span>Body<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> body <span class="token operator">=</span> serde_json<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create response and set content type</span>        HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">content_type</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> Responder <span class="token punctuation">{</span>    MyObj <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"user"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="响应体流"><a href="#响应体流" class="headerlink" title="响应体流"></a>响应体流</h3><p>Response body 可以异步生成，在这个case下，body必须实现stream trait Stream&lt;Item=Bytes,Error=Error&gt;：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> App<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">,</span> HttpServer<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> futures<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>future<span class="token punctuation">:</span><span class="token punctuation">:</span>ok<span class="token punctuation">,</span> stream<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">once</span><span class="token punctuation">}</span><span class="token punctuation">;</span>#<span class="token punctuation">[</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/stream"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>async <span class="token keyword">fn</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HttpResponse <span class="token punctuation">{</span>    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token keyword">once</span><span class="token punctuation">(</span>ok<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>_<span class="token punctuation">,</span> Error<span class="token operator">></span><span class="token punctuation">(</span>web<span class="token punctuation">:</span><span class="token punctuation">:</span>Bytes<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_static</span><span class="token punctuation">(</span><span class="token string">b"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">content_type</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">streaming</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token attribute attr-name">#[actix_web::main]</span>async <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>    HttpServer<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">||</span> App<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>?        <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>await<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不同的返回类型"><a href="#不同的返回类型" class="headerlink" title="不同的返回类型"></a>不同的返回类型</h3><p>有时候你需要返回不同类型的response。例如，错误检查和错误返回，返回异步相应或者任何要求两个不同类型结果的情况。再这种情况下Either类型可以使用，Either允许结合不同类型的responder类型为单个类型。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> actix_web<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>Either<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> HttpResponse<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">type</span> RegisterResult <span class="token operator">=</span> Either<span class="token operator">&lt;</span>HttpResponse<span class="token punctuation">,</span> Result<span class="token operator">&lt;</span><span class="token operator">&amp;</span>'<span class="token keyword">static</span> str<span class="token punctuation">,</span> Error<span class="token operator">>></span><span class="token punctuation">;</span>async <span class="token keyword">fn</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> RegisterResult <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">is_a_variant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// choose Left variant</span>        Either<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Left</span><span class="token punctuation">(</span>HttpResponse<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Bad data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// choose Right variant</span>        Either<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Right</span><span class="token punctuation">(</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础(字符串)</title>
      <link href="/2023/09/10/rust-ji-chu-zi-fu-chuan/"/>
      <url>/2023/09/10/rust-ji-chu-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>rust String类似于C++中的std::string，本质上是一种容纳字符串的容器。但是多了更多的操作方法。字符串字面量是Rust中的常规字符串，它本身也有一些方法。</p><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2><p>字符串字面量常见的方法：</p><ul><li>len:获取字符串元素的个数。</li><li></li><li></li><li>常见API：</li><li><code>len(&amp;self) -&gt; usize</code>：返回字符串的长度。</li><li><code>is_empty(&amp;self) -&gt; bool</code>：判断字符串是否为空。</li><li><code>is_char_boundary(&amp;self, index: usize) -&gt; bool</code>：检查字符串在<code>index</code>位置的值是否超过了字符串边界(字符串长度)。</li><li><code>floor_char_boundary(&amp;self, index: usize) -&gt; usize</code>：找到最接近index但是又没有越界的索引（实验性）。</li><li><code>ceil_char_boundary(&amp;self, index: usize) -&gt; usize</code>：找到最接近index但是又没有越界的索引的下一个索引（实验性）。</li><li><code>as_bytes(&amp;self) -&gt; &amp;[u8]</code>：转换字符串切片为字节切片（bytes）反向转换使用from_utf8()。类似于python中的str.encode(‘utf-8’)。</li><li><code>as_bytes_mut(&amp;mut self) -&gt; &amp;mut [u8]</code>：转换字符串切片为字节切片(bytes)，转换之后的值可以被修改（unsafe）。</li><li><code>as_ptr(&amp;self) -&gt; *const u8</code>：转换字符串切片为指向bytes的指针。</li><li><code>as_mut_ptr(&amp;mut self) -&gt; *mut u8</code>：转换可修改字符串为指向字符串的指针（同样可修改）。</li><li><code>get&lt;I&gt;(&amp;self, i: I) -&gt; Option&lt;&amp;&lt;I as SliceIndex&lt;str&gt;&gt;::Output&gt; where I: SliceIndex&lt;str&gt;,</code>：返回字符串的子串。输入I的类型可以是切片类型，例如：”0..4”表示索引[0-4)。</li><li><code>get&lt;I&gt;(&amp;mut self, i: I) -&gt; Option&lt;&amp;&lt;I as SliceIndex&lt;str&gt;&gt;::Output&gt; where I: SliceIndex&lt;str&gt;,</code>：返回可修改的字符串的子串。输入I的类型可以是切片类型，例如：”0..4”表示索引[0-4)。</li><li><code>get_unchecked&lt;I&gt;(&amp;self, i: I) -&gt; &amp;&lt;I as SliceIndex&lt;str&gt;&gt;::Output</code>：返回未经检查的输入下的子串。调用者保证范围可用。（unsafe）</li><li><code>get_unchecked_mut&lt;I&gt;(&amp;mut self,i: I) -&gt; &amp;mut &lt;I as SliceIndex&lt;str&gt;&gt;::Output where I: SliceIndex&lt;str&gt;</code>：返回一个未经检查的可修改的子串。（unsafe）</li><li><code>split_at(&amp;self, mid: usize) -&gt; (&amp;str, &amp;str)</code>：将字符串使用mid作为切分位置切分为两个字符串。</li><li><code>split_at_mut(&amp;mut self, mid: usize) -&gt; (&amp;mut str, &amp;mut str)</code>：将字符串使用mid作为切分位置切分为两个字符串，切分之后的字符串均可以被修改。</li><li><code>chars(&amp;self) -&gt; Chars&lt;&#39;_&gt;</code>：返回一个指向char的迭代器,char为合法utf-8。</li><li><code>char_indices(&amp;self) -&gt; CharIndices&lt;&#39;_&gt;</code>：返回一个字符串切片char之上的迭代器，包含有合法utf8字符的索引。</li><li><code>bytes(&amp;self) -&gt; Bytes&lt;&#39;_&gt;</code>：返回一个bytes类型的迭代器。</li><li><code>split_whitespace(&amp;self) -&gt; SplitWhitespace&lt;&#39;_&gt;</code>:返回一个使用空格分割之后的指向字符串剩余字符的迭代器。分割空格是utf-8定义的空格。</li><li><code>split_ascii_whitespace(&amp;self) -&gt; SplitAsciiWhitespace&lt;&#39;_&gt;</code>：返回一个使用空格分割之后的指向字符串剩余字符的迭代器。分割空格是ascii定义的空格。</li><li><code>lines(&amp;self) -&gt; Lines&lt;&#39;_&gt;</code>：返回一个使用换行分割之后的指向字符串剩余字符的迭代器。分割空格是ascii定义的空格<code>\r\n</code>和<code>\n</code>均视为标记行的符号。</li><li><code>encode_utf16(&amp;self) -&gt; EncodeUtf16&lt;&#39;_&gt;</code>：返回指向utf16的u16的迭代器。</li><li><code>contains&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; bool where P: Pattern&lt;&#39;a&gt;</code>:返回字符串切片是否包含有另一个字符串。</li><li><code>starts_with&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; bool where P: Pattern&lt;&#39;a&gt;</code>：返回字符串是否已特定字符串开头。</li><li><code>ends_with&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; bool where P:Pattern&lt;&#39;a&gt;</code>：返回字符串是否以特定字符串结尾。</li><li><code>find&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; Option&lt;usize&gt;where P: Pattern&lt;&#39;a&gt;,</code>：在字符串中查找另一个字符P，找到则返回Some包装之后的索引，否则返回None。</li><li><code>rfind&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; Option&lt;usize&gt;</code>：在字符串中反向查找另一个字符P，找到则返回Some包装之后的索引否则返回None。</li><li><code>split&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; Split&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;</code>：使用一个字符P，切分字符串中的元素为字符串，返回指向字符串的迭代器，可以理解为一旦出现有P中的字符就split。</li><li><code>split_inclusive&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; SplitInclusive&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;</code>：递归使用字符P切分字符串，切分的时候包含字符串。</li><li><code>rsplit&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; RSplit&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;</code>：返回分割字符串之后反向迭代器。</li><li><code>split_terminator&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; SplitTerminator&lt;&#39;a, P&gt;  where P: Pattern&lt;&#39;a&gt;</code>：和split功能类似，除了结尾字符串为空的时候跳过。</li><li><code>rsplit_terminator&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; RSplitTerminator&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;</code>：和split_terminator类似，迭代器指向反向。</li><li><code>splitn&lt;&#39;a, P&gt;(&amp;&#39;a self, n: usize, pat: P) -&gt; SplitN&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;</code>：使用P分割字符串的时候值分割n次，返回指向对应字符串的迭代器。</li><li><code>rsplitn&lt;&#39;a, P&gt;(&amp;&#39;a self, n: usize, pat: P) -&gt; RSplitN&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;</code>：和splitn类似，返回指向反向的迭代器。</li><li><code>split_once&lt;&#39;a, P&gt;(&amp;&#39;a self, delimiter: P) -&gt; Option&lt;(&amp;&#39;a str, &amp;&#39;a str)&gt;</code>：split一次，将split的两边的结果填入Option中。</li><li><code>rsplit_once&lt;&#39;a, P&gt;(&amp;&#39;a self, delimiter: P) -&gt; Option&lt;(&amp;&#39;a str, &amp;&#39;a str)&gt; where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;</code>:和split_once一样，填入值的方向相反。</li><li><code>matches&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; Matches&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;</code>:在字符串中匹配特定的字符串，返回指向匹配字符串的迭代器。</li><li><code>rmatches&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; RMatches&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;</code>：和matchs类似，迭代器指向方向相反。</li><li><code>match_indices&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; MatchIndices&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;</code>:返回指向匹配字符串和字符串索引的迭代器。</li><li><code>rmatch_indices&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; RMatchIndices&lt;&#39;a, P&gt; where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;</code>：match_indices相同，迭代器指向方向相反。</li><li><code>trim(&amp;self) -&gt; &amp;str</code>:返回删除特定末尾字符串之后的字符串。</li><li><code>trim_start(&amp;self) -&gt; &amp;str</code>:从头开始返回删除特定空白字符之后的字符串。</li><li><code>trim_end(&amp;self) -&gt; &amp;str</code>:从结尾开始，返回删除特定空白符之后的字符串。</li><li><code>trim_matches&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; &amp;&#39;a str where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: DoubleEndedSearcher&lt;&#39;a&gt;</code>：返回删除以p开头和结尾的字符之后的字符串。</li><li><code>trim_start_matches&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; &amp;&#39;a str where P: Pattern&lt;&#39;a&gt;</code>：返回从头开始删除特定p之后的字符串。</li><li><code>strip_prefix&lt;&#39;a, P&gt;(&amp;&#39;a self, prefix: P) -&gt; Option&lt;&amp;&#39;a str&gt; where P: Pattern&lt;&#39;a&gt;,</code>:返回prefix开头的prefix移除之后的字符串。</li><li><code>strip_suffix&lt;&#39;a, P&gt;(&amp;&#39;a self, suffix: P) -&gt; Option&lt;&amp;&#39;a str&gt; where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;</code>：返回suffix被删除之后的字符串。</li><li><code>trim_end_matches&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P) -&gt; &amp;&#39;a str where P: Pattern&lt;&#39;a&gt;,&lt;P as Pattern&lt;&#39;a&gt;&gt;::Searcher: ReverseSearcher&lt;&#39;a&gt;,</code>：返回所有prefix被删除之后的字符串。</li><li><code>parse&lt;F&gt;(&amp;self) -&gt; Result&lt;F, &lt;F as FromStr&gt;::Err&gt; where F: FromStr</code>：解析字符串为另一种类型。你可以使用parse::<t>将字符串转换为T类型。</t></li><li><code>is_ascii(&amp;self) -&gt; bool</code>：检查所有的字符是否都是ascii字符。</li><li><code>eq_ignore_ascii_case(&amp;self, other: &amp;str) -&gt; bool</code>：ascii字符串忽略大小写比较。</li><li><code>make_ascii_uppercase(&amp;mut self)</code>：转换字符串为ascii大写的字符。</li><li><code>make_ascii_lowercase(&amp;mut self)</code>：转换字符串为ascii小写字符。</li><li><code>escape_debug(&amp;self) -&gt; EscapeDebug&lt;&#39;_&gt;</code>：指向将转义符作为真真的字符之后的字符串的迭代器。</li><li><code>escape_default(self) -&gt; EscapeDefault</code>：指向默认转义符转换为字符串之后的迭代器。</li><li><code>escape_unicode(&amp;self) -&gt; EscapeUnicode&lt;&#39;_&gt;</code>：指向将unicode转义符转换为字符串的迭代器。</li><li><code>into_boxed_bytes(self: Box&lt;str, Global&gt;) -&gt; Box&lt;[u8], Global&gt;</code>：转换Box<str>为Box<u8>不拷贝和分配内存。</u8></str></li><li><code>replace&lt;&#39;a, P&gt;(&amp;&#39;a self, from: P, to: &amp;str) -&gt; String where P: Pattern&lt;&#39;a&gt;</code>：将匹配的pattern替换为另一个字符串。replace将产生一个新的字符串，然后拷贝对应的数据到新的字符串。</li><li><code>replacen&lt;&#39;a, P&gt;(&amp;&#39;a self, pat: P, to: &amp;str, count: usize) -&gt; String</code>：和replace一样，不过执行n簇replace操作。</li><li><code>to_lowercase(&amp;self) -&gt; String</code>：返回转换为小写之后的字符串，结果为新的字符串。</li><li><code>to_uppercase(&amp;self) -&gt; String</code>：返回转换为大写之后的字符串，结果为新的字符串。</li><li><code>into_string(self: Box&lt;str, Global&gt;) -&gt; String</code>：转换Box<str>为String而没有任何拷贝和内存分配。</str></li><li><code>repeat(&amp;self, n: usize) -&gt; String</code>：创建一个字符重复n次的String。</li><li><code>to_ascii_uppercase(&amp;self) -&gt; String</code>：返回一个对应ascii字符转换为大写之后的String。</li><li><code>to_ascii_lowercase(&amp;self) -&gt; String</code>：返回一个对应ascii字符串转换为小写之后的String。</li></ul><h2 id="字符串实现的trait"><a href="#字符串实现的trait" class="headerlink" title="字符串实现的trait"></a>字符串实现的trait</h2><ul><li>Add：<code>add(self, rhs: &amp;&#39;a str) -&gt; &lt;Cow&lt;&#39;a, str&gt; as Add&lt;&amp;&#39;a str&gt;&gt;::Output</code>：实现字符串的加法（拼接）。</li><li>AddSing：<code>impl&lt;&#39;a&gt; AddAssign&lt;&amp;&#39;a str&gt; for Cow&lt;&#39;a, str&gt;</code>：实现+=操作。</li><li>AsMut：<code>impl AsMut&lt;str&gt; for String</code>，实现转换为mut。</li><li>AsRef<t> :实现转换输入类型为T，T为u8、OsStr、Path、str。</t></li><li></li><li><code>len_utf8(self) -&gt; usize</code>：返回utf-8编码之后的长度。</li><li><code>len_utf16(self) -&gt; usize</code>：返回utf-16编码之后长度</li><li><code>encode_utf8(self, dst: &amp;mut [u8]) -&gt; &amp;mut str</code>：返回utf8编码字符后的字符串。</li><li><code>encode_utf16(self, dst: &amp;mut [u16]) -&gt; &amp;mut [u16]</code>：返回utf16编码字后的字符串。</li><li><code>is_alphabetic(self) -&gt; bool</code>:返回是否为字母</li><li>``</li><li>``</li><li>``</li><li>``</li><li>``</li><li>``</li><li>``</li><li>``</li></ul><h2 id="Sting"><a href="#Sting" class="headerlink" title="Sting"></a>Sting</h2><p>常见的构造方式：</p><ul><li><code>String::from(&quot;hello world&quot;)</code>：通过从”hello world”字面量构建String对象。</li><li><code>String::from_utf8(vec![240,220]).unwrap();</code>：从uint8数值字符向量读取并转换为String对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 内存安全、高性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust编程、rust基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础(读写文件)</title>
      <link href="/2023/09/10/rust-ji-chu-du-xie-wen-jian/"/>
      <url>/2023/09/10/rust-ji-chu-du-xie-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust文件读写"><a href="#Rust文件读写" class="headerlink" title="Rust文件读写"></a>Rust文件读写</h1><p>文件读写之前先简单介绍一下rust的两个常见enum。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> Option<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token function">Some</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>  None<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的Option是一个泛型enum，它可以接收任意类型<code>T</code>然后包装其为一个Option enum。举个例子，有时候我们读文件的时候，成功读取则返回”success”否则返回”None”。Rust是编译型语言，作为返回值的两个分支必须是相同的类型否则则无法通过编译。当然我们可以返回一个””空字符串，但不够优雅。enum结合泛型就能封装任意类型为特定的enum。这里的Option<t>就是。其中Some(T)表示包含T的Option类型，None表示不包含T的Option类型。</t></p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">enum</span> Result<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Err</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读"><a href="#文件读" class="headerlink" title="文件读"></a>文件读</h2><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">file_to_str</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> mesg <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> mesg<span class="token punctuation">)</span><span class="token punctuation">;</span>    mesg<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中读取filename中的文件为字符串，类似于python中的f.read()。<code>fs::File::open(filename)</code>返回的就是一个Result，这里成功打开结果就是File类型的file，否则爆出”无法打开文件”的错误。文件读取为向量：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">file_to_vec</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span>Vec<span class="token operator">&lt;</span>u8<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> Vec<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个空的向量</span>    file<span class="token punctuation">.</span><span class="token function">read_to_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将读取的内容的数值写入向量</span>    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回包装之后的Result</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，文件字符使用uint8编码，类似于python中的byte。直接打印输出则会输出数值。</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">file_to_vec_with_buffer</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span>Vec<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> io_buffer <span class="token operator">=</span> BufReader<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    io_buffer<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>BufReader</code>读取文件行保存为<code>Vec&lt;String&gt;</code>，结果封装在Result中。完整代码：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fs<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>BufRead<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">{</span>BufReader<span class="token punctuation">,</span> Read<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">file_to_str</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> mesg <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> mesg<span class="token punctuation">)</span><span class="token punctuation">;</span>    mesg<span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">file_to_vec</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span>Vec<span class="token operator">&lt;</span>u8<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> Vec<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">read_to_end</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">file_to_vec_with_buffer</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">)</span> <span class="token punctuation">-></span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Result<span class="token operator">&lt;</span>Vec<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"无法打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> io_buffer <span class="token operator">=</span> BufReader<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    io_buffer<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token string">"/tmp/log"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token function">file_to_str</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"line is :{:?}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件写"><a href="#文件写" class="headerlink" title="文件写"></a>文件写</h2><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">write_msg_to_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">create</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write!</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者:</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">write_msg_to_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">create</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码：</p><pre class="line-numbers language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>fs<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">:</span><span class="token punctuation">:</span>Write<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">write_msg_to_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>String<span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> fs<span class="token punctuation">:</span><span class="token punctuation">:</span>File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">create</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token string">"/tmp/log"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mesg <span class="token operator">=</span> <span class="token string">"hello world\n你好世界"</span><span class="token punctuation">;</span>    <span class="token function">write_msg_to_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filename<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mesg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Result-常见API"><a href="#Result-常见API" class="headerlink" title="Result 常见API"></a>Result 常见API</h2><ul><li><code>is_ok(self)-&gt;bool</code>：如果Result是<code>Ok</code>则返回true，否则返回false。</li><li><code>is_ok_and(self, f: impl FnOnce(T) -&gt; bool) -&gt; bool</code>：如果Result是ok的话进一步判断。</li><li><code>is_err(&amp;self) -&gt; bool</code>：如果是<code>Err</code>则返回true否则返回false。</li><li><code>is_err_and(self, f: impl FnOnce(E) -&gt; bool) -&gt; bool</code>：如果是<code>Err</code>再使用函数判断。</li><li><code>ok(self) -&gt; Option&lt;T&gt;</code>：将Ok转换为Option<t>。</t></li><li><code>err(self) -&gt; Option&lt;E&gt;</code>：将Err转换为Option<e>。</e></li><li><code>as_ref(&amp;self) -&gt; Result&lt;&amp;T, &amp;E&gt;</code>：转换 &amp;Result&lt;T, E&gt; 为 Result&lt;&amp;T, &amp;E&gt;。</li><li><code>as_mut(&amp;mut self) -&gt; Result&lt;&amp;mut T, &amp;mut E&gt;</code>：转换 Result&lt;&amp;T, &amp;E&gt; 为 &amp;Result&lt;T, E&gt; 。</li><li><code>map&lt;U, F&gt;(self, op: F) -&gt; Result&lt;U, E&gt;</code>：映射Result&lt;T, E&gt; 为 Result&lt;U, E&gt;，此函数在<code>Ok</code>状态下执行映射函数。</li><li><code>map_or&lt;U, F&gt;(self, default: U, f: F) -&gt; U</code>：如果为<code>Ok</code>则执行映射函数否则返回默认值Default。</li><li><code>map_or_else&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U</code>：如果是<code>Ok</code>则执行映射函数f，否则在<code>Err</code>上执行d。</li><li><code>map_err&lt;F, O&gt;(self, op: O) -&gt; Result&lt;T, F&gt;</code>：如果是<code>Ok</code>则直接返回本身，否则对<code>Err</code>使用映射函数。</li><li><code>inspect&lt;F&gt;(self, f: F) -&gt; Result&lt;T, E&gt;</code>：如果是<code>Ok</code>则以引用的形式调用函数。</li><li><code>inspect_err&lt;F&gt;(self, f: F) -&gt; Result&lt;T, E&gt;</code>：如果是<code>Err</code>则以引用的形式调用函数。</li><li><code>as_deref(&amp;self) -&gt; Result&lt;&amp;&lt;T as Deref&gt;::Target, &amp;E&gt;</code>：转换Result&lt;T, E&gt; (或者 &amp;Result&lt;T, E&gt;) 为 Result&lt;&amp;<t as deref>::Target, &amp;E&gt;。</t></li><li><code>as_deref_mut(&amp;mut self) -&gt; Result&lt;&amp;mut &lt;T as Deref&gt;::Target, &amp;mut E&gt;</code>：转换Result&lt;T, E&gt; (或者 &amp;mut Result&lt;T, E&gt;) 为 Result&lt;&amp;mut <t as derefmut>::Target, &amp;mut E&gt;。</t></li><li><code>iter(&amp;self) -&gt; Iter&lt;&#39;_, T&gt;</code>：返回迭代器，如果为<code>Ok</code>则返回Result::Ok的值否则为None。</li><li><code>iter_mut(&amp;mut self) -&gt; IterMut&lt;&#39;_, T&gt;</code>：返回迭代器，如果为<code>Ok</code>则返回Result::Ok的值否则为None。其中返回值可以被修改。</li><li><code>expect(self, msg: &amp;str) -&gt; T</code>：返回<code>Ok</code>包含的值，如果是<code>Err</code>则报错。</li><li><code>unwrap(self) -&gt; T</code>：如果为<code>Ok</code>则返回值本身否则将报错。</li><li><code>unwrap_or_default()</code>：如果为<code>Ok</code>则返回值否则返回默认值。</li><li><code>expect_err(self, msg: &amp;str) -&gt; E where T:Debug</code>：返回<code>Err</code>的值，如果是<code>Ok</code>则报错。</li><li><code>unwrap_err(self)-&gt;E where T:Debug</code>：返回<code>Err</code>包含的值。</li><li><code>into_ok(self) -&gt; T where E:Into&lt;!&gt;</code>：返回<code>Ok</code>包含的值，不报任何错误。</li><li><code>into_err(self)-&gt;E where T:Into&lt;!&gt;</code>：返回<code>Err</code>包含的值，不报任何错误。</li><li><code>and&lt;U&gt;(self, res: Result&lt;U, E&gt;) -&gt; Result&lt;U, E&gt;</code>：如果是<code>Ok</code>则返回res否则返回self。</li><li><code>and_then&lt;U, F&gt;(self, op: F) -&gt; Result&lt;U, E&gt; where F:FnOnce(T)-&gt;Result(U,E)</code>：如果是<code>Ok</code>则调用<code>op</code>否则返回对应的<code>Err</code>值。</li><li><code>or&lt;F&gt;(self, res: Result&lt;T, F&gt;) -&gt; Result&lt;T, F&gt;</code>：如果是<code>Err</code>则返回res否则返回对应的<code>Ok</code>。</li><li><code>or_else&lt;F, O&gt;(self, op: O) -&gt; Result&lt;T, F&gt; where O: FnOnce(E) -&gt; Result&lt;T, F&gt;</code>：如果结果为<code>Err</code>则调用op否则返回<code>Ok</code>本身。</li><li><code>unwrap_or(self, default: T) -&gt; T</code>：返回<code>Ok</code>的值否则提供默认值。</li><li><code>unwrap_or_else&lt;F&gt;(self, op: F) -&gt; T where F: FnOnce(E) -&gt; T</code>：返回<code>Ok</code>的值或者返回使用闭包计算的值。</li><li><code>unwrap_unchecked(self) -&gt; T(Unsafe)</code>：返回包含<code>Ok</code>的值，不检查是否为<code>Err</code>。调用此方法可能产生未定义的行为。</li><li><code>unwrap_err_unchecked(self) -&gt; E(Unsafe)</code>：返回<code>Err</code>包含的值不检查是否为<code>Ok</code>。调用此方法可能产生未定义的行为。</li><li><code>copied(self) -&gt; Result&lt;T, E&gt; where T:Copy</code>：通过拷贝<code>Ok</code>的内容，映射Result&lt;&amp;T, E&gt; 为Result&lt;T, E&gt;。</li><li><code>cloned(self) -&gt; Result&lt;T, E&gt;</code>:通过clone <code>Ok</code>的值映射Result&lt;&amp;T, E&gt; 为 Result&lt;T, E&gt;。</li><li><code>transpose(self) -&gt; Option&lt;Result&lt;T, E&gt;&gt;</code>：transpose 一个Result为另一个Result。<code>Ok(None)</code>被映射为<code>None</code>。<code>Ok(Some(_))</code>和<code>Err(_)</code>被映射为<code>Some(Ok(_))</code>和<code>Some(Err(_))</code>。</li><li><code>flatten(self) -&gt; Result&lt;T, E&gt;</code>：转换Result&lt;Result&lt;T, E&gt;, E&gt; 为 Result&lt;T, E&gt;。</li><li><code>from_iter&lt;I&gt;(iter: I) -&gt; Result&lt;V, E&gt; where I: IntoIterator&lt;Item = Result&lt;A, E&gt;&gt;</code>:将容器中的每个元素拿出来然后使用<code>Ok</code>包装，否则返回<code>Err</code>。</li><li><code>into_iter(self) -&gt; IntoIter&lt;T&gt;</code>：如果值为<code>Ok</code>则返回包含值的迭代器。</li><li><code>product&lt;I&gt;(iter: I) -&gt; Result&lt;T, E&gt;</code>：如果为<code>Ok</code>则取出每一个元素累乘后包装，否则<code>Err</code>插入其中。</li><li><code>sum&lt;I&gt;(iter: I) -&gt; Result&lt;T, E&gt; where I: Iterator&lt;Item = Result&lt;U, E&gt;&gt;,</code>：一直获取其中的元素直到无法获取下一个元素或者其本身为<code>Err</code>为止，返回元素的和。</li><li><code>report(self) -&gt; ExitCode</code>：调用函数返回状态码。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rust编程、rust基础特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异构计算基础</title>
      <link href="/2023/09/09/yi-gou-ji-suan-ji-chu/"/>
      <url>/2023/09/09/yi-gou-ji-suan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="CUDA编程基础（C-特性）"><a href="#CUDA编程基础（C-特性）" class="headerlink" title="CUDA编程基础（C++特性）"></a>CUDA编程基础（C++特性）</h1><h2 id="内存限定符"><a href="#内存限定符" class="headerlink" title="内存限定符"></a>内存限定符</h2><ul><li><code>__device__</code>:</li><li><code>__shared__</code>:</li><li><code>__global__</code>:</li><li><code>__constant__</code>:仅仅可以从host代码通过runtime函数赋值，不能从device侧赋值。<br><code>__device__</code>、<code>__shared__</code>、<code>__managed__</code>和<code>__constant__</code>内存空间说明符不允许在：</li></ul><ol><li>class、struct和union数据成员上</li><li>在host执行的外部函数中的变量</li></ol><p><strong>device</strong>、<strong>constant</strong>、<strong>managed</strong>内存空间说明符在device上不允许在外部或者非静态函数中声明。</p><p><strong>device</strong>、<strong>constant</strong>、<strong>managed</strong>或者<strong>shared</strong>变量定义不能在非空构造体或者非空析构体的类类型中存在。如果trivial构造体或者满足下面的条件条件：</p><ul><li>构造函数已经被定义</li><li>构造函数没有参数，初始化列表为空同时函数体也为空。</li><li>没有虚函数，没有虚基类或者没有非静态数据成员初始化器。</li><li>默认的所有基类构造体可以被认为是空。</li><li>对类的所有非静态数据成员默认构造函数可以被当做空。</li></ul><p>析构体考虑作为一个空的翻译题，如果析构体不满足下面的条件：</p><ol><li>析构函数已经被定义</li><li>析构函数体是空</li><li>没有虚函数或者没有虚基类</li><li>所有基类的析构函数可以被操作空</li><li>类的非静态成员可以被党作为空。</li></ol><p>使用nvcc完整编译代码的过程中，<strong>device</strong>、<strong>shared</strong>、<strong>managed</strong>和<strong>constant</strong>变量不能使用extern定义为外部变量。分开变异模式下<strong>device</strong>、<strong>shared</strong>、<strong>managed</strong>和<strong>constant</strong>变量可以使用extern关键字定义为外部变量，然后如果没有找到外部变量的定义nvlink将报错（除非是动态分配的<strong>shared</strong>变量）。</p><h2 id="managed-内存空间限定符"><a href="#managed-内存空间限定符" class="headerlink" title="__managed__内存空间限定符"></a><code>__managed__</code>内存空间限定符</h2><p><code>__managed__</code>内存空间限定符有如下限制：</p><ul><li>managed变量的地址不能是一个常量表达式。</li><li>managed变量不应该有常量const限定符。</li><li>managed变量不应该有引用类型。</li><li>managed变量的地址或者值不应该在CUDA Runtime不可用的状态下使用，包括下面的情况：</li><li>static/dynamic 初始化或者析构对象或者线程本地存储。</li><li>在exit()之后的代码（例如gcc使用<code>__attribute__((destructor))</code>标记的）</li><li>当CUDA Runtime没有被初始化的时候执行代码（例如：被gcc标记为<code>__attribute__((constructor))</code>）</li><li>一个managed变量不能用作decltype()表达式的参数。</li><li>managed变量对动态分配的managed 内存有一致的行为。</li><li>managed变量在多GPU环境下变量仅仅分配一次。</li><li>managed 变量声明在host执行的函数中没有外部链接性。</li><li>managed变量没有外部或者静态链接被允许函数在设备商执行。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">__device__ __managed__ <span class="token keyword">int</span> xxx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// OK</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>xxx<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// error: use of managed variable</span>                                             <span class="token comment" spellcheck="true">// (xxx) in static initialization</span><span class="token keyword">struct</span> S1_t <span class="token punctuation">{</span>  <span class="token keyword">int</span> field<span class="token punctuation">;</span>  <span class="token function">S1_t</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">field</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> S2_t <span class="token punctuation">{</span>  <span class="token operator">~</span><span class="token function">S2_t</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> xxx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>S1_t temp1<span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">// error: use of managed variable</span>                                            <span class="token comment" spellcheck="true">// (xxx) in dynamic initialization</span>S2_t temp2<span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">// error: use of managed variable</span>                                            <span class="token comment" spellcheck="true">// (xxx) in the destructor of</span>                                            <span class="token comment" spellcheck="true">// object with static storage</span>                                            <span class="token comment" spellcheck="true">// duration</span>__device__ __managed__ <span class="token keyword">const</span> <span class="token keyword">int</span> yyy <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// error: const qualified type</span>__device__ __managed__ <span class="token keyword">int</span> <span class="token operator">&amp;</span>zzz <span class="token operator">=</span> xxx<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// error: reference type</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">*</span>addr<span class="token operator">></span> <span class="token keyword">struct</span> S3_t <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>S3_t<span class="token operator">&lt;</span><span class="token operator">&amp;</span>xxx<span class="token operator">></span> temp<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// error: address of managed</span>                                            <span class="token comment" spellcheck="true">// variable(xxx) not a</span>                                            <span class="token comment" spellcheck="true">// constant expression</span>__global__ <span class="token keyword">void</span> <span class="token function">kern</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">assert</span><span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token operator">&amp;</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// OK</span>  xxx <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">// OK</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>xxx<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// OK</span>  kern<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xxx<span class="token operator">++</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// OK</span>  <span class="token keyword">decltype</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> qqq<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// error: managed variable(xxx) used</span>                                            <span class="token comment" spellcheck="true">// as unparenthized argument to</span>                                            <span class="token comment" spellcheck="true">// decltype</span>  <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">)</span> zzz <span class="token operator">=</span> yyy<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// OK</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="global"><a href="#global" class="headerlink" title="__global__"></a><code>__global__</code></h2><ul><li><code>__global__</code> 函数参数通过常量内存传入device，在volta架构开始，存储参数限制为32764字节，在更老的架构上是4kb。</li><li><code>__global__</code> 函数不能有可变参数。</li><li><code>__global__</code> 函数参数不能传递引用。<br>当<code>__global__</code> 函数从device端启动的时候，每个参数都应该是trivial cipyable和trivially destructible的。当<code>__global__</code>函数从host段启动的时候，每个参数类型不允许是Non-traivially copyable的或者non-trivially-copyable，但是处理这样的类型不使用C++标准的模型，用户代码必须确保工作流不影响程序的并发性，工作流分为两个部分：</li></ul><ol><li>内存拷贝代替拷贝构造函数<br>当<code>__global__</code>函数从host代码启动的时候，编译器生成子函数拷贝函数的参数，在最后使用memcpy拷贝参数到device上的<code>__global__</code>函数参数。如果一个参数是non-trivially-copyabley,也许会打断程序。</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token keyword">struct</span> S<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    __host__ __device__ <span class="token function">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    __host__ __device__ <span class="token function">S</span><span class="token punctuation">(</span><span class="token keyword">const</span> S<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ptr<span class="token operator">=</span><span class="token operator">&amp;</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//拷贝构造函数};</span>__global__ <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>S in<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>ptr <span class="token operator">==</span> <span class="token operator">&amp;</span>in<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//断言失败，因为编译器生成代码将拷贝in的内容到kernel的参数存放空间，因为拷贝构造函数掉过了，in.ptr没有初始化为&amp;in.x</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    S temp<span class="token punctuation">;</span>    foo<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span>                                                                                                                                                                                    [0/6351]</span>__managed__ <span class="token keyword">int</span> counter<span class="token punctuation">;</span><span class="token keyword">struct</span> S1 <span class="token punctuation">{</span><span class="token function">S1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token function">S1</span><span class="token punctuation">(</span><span class="token keyword">const</span> S1 <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">++</span>counter<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>__global__ <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>S1<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* this assertion may fail, because   the compiler generates stub   functions on the host for a kernel   launch, and they may copy the   argument by value more than once.*/</span><span class="token function">assert</span><span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>S1 V<span class="token punctuation">;</span>foo<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>析构体也需要在<code>__global__</code> 函数完成之前调用<br>host端kernel启动时异步的，如果一个<code>__global__</code>函数参数有Non-traivial析构体，析构体在函数执行完成之前执行host代码。这会打断程序执行造成副作用：</li></ol><pre><code>struct S { int *ptr; S() : ptr(nullptr) { } S(const S &amp;) { cudaMallocManaged(&amp;ptr, sizeof(int)); } ~S() { cudaFree(ptr); }};__global__ void foo(S in) {  //error: This store may write to memory that has already been  //       freed (see below).  *(in.ptr) = 4;}int main() { S V; /* The object &#39;V&#39; is first copied by value to a compiler-generated  * stub function that does the kernel launch, and the stub function  * bitwise copies the contents of the argument to kernel parameter  * memory.  * However, GPU kernel execution is asynchronous with host  * execution.  * As a result, S::~S() will execute when the stub function   returns, releasing allocated memory, even though the kernel may not have finished execution.  */ foo&lt;&lt;&lt;1,1&gt;&gt;&gt;(V); cudaDeviceSynchronize();}</code></pre><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a><code>volatile</code>关键字</h2><p>编译器会优化全局或者共享内存的读写（例如缓存全局内存上的变量到L1缓存或者寄存器）。<code>volatile</code>关键字可以用来禁用优化，它表示：如果一个全局内存或者是共享内存中的变量被声明为voltile，编译器假设它的值可能被改变或者被任何其他的线程使用，因此任何对这个变量的引用都对映射实际的内存读写指令。</p><h2 id="GPU指针"><a href="#GPU指针" class="headerlink" title="GPU指针"></a>GPU指针</h2><p><code>__device__</code>、<code>__shared__</code>、<code>__constant__</code>变量仅仅可以用在设备代码中，<code>__device__</code>或者<code>__constant__</code>变量通过cudaGetSymbolAddress()函数在设备上调用然后获取指针。</p><h2 id="device-和-host-声明"><a href="#device-和-host-声明" class="headerlink" title="__device__和__host__声明"></a><code>__device__</code>和<code>__host__</code>声明</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cuda_runtime.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">:</span>    __host__ __device__ <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d address = %p\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derive</span><span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Other</span><span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span>    <span class="token keyword">int</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>__device__ <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Derive D1<span class="token punctuation">;</span>    Other D2<span class="token punctuation">;</span><span class="token punctuation">}</span>__host__ <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Other D3<span class="token punctuation">;</span><span class="token punctuation">}</span>__global__ <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test call device func foo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">call_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"run call_test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">call_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里声明的<code>foo()</code>函数声明为在<code>__device__</code>上调用Derive带设备上调用，而<code>bar的</code>和<code>foo</code>分别声明了对<code>__host__</code>和<code>__device__</code>的调用，因此可以从host或者device上调用。如果明确声明虚析构函数的设备空间，则派生类的设备空间以基类为准：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cuda_runtime.h></span></span><span class="token keyword">struct</span> Base1<span class="token punctuation">{</span>    <span class="token keyword">virtual</span> __host__ __device__ <span class="token operator">~</span><span class="token function">Base1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 派生类可以在host和device上访问</span><span class="token keyword">struct</span> Derived1 <span class="token operator">:</span> <span class="token keyword">public</span> Base1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Base2<span class="token punctuation">{</span>    <span class="token keyword">virtual</span> __device__ <span class="token operator">~</span><span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>__device__ Base2<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 派生类Derived2可以在Derived2上访问</span><span class="token keyword">struct</span> Derived2 <span class="token operator">:</span> <span class="token keyword">public</span> Base2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Base1 b1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>C++中的“non-trivially-copyable type”指的是不符合POD（Plain Old Data）数据类型定义的数据类型。POD类型是指仅包含C++内置数据类型和符合特定要求的自定义类型，且可以使用浅拷贝来进行内存复制的数据类型。非POD类型则需要通过类似拷贝构造函数或移动构造函数等特殊函数进行内存复制，这些类型被称为“non-trivially-copyable type”。在C++11标准中，引入了移动语义和右值引用，使得非POD类型可以更高效地进行传递和复制。但是，仍然需要注意的是，非POD类型在进行内存复制时可能会引发一些问题，比如浅拷贝导致数据的混乱等。<br>因此，如果需要对非POD类型进行内存复制，应该使用适当的特殊函数进行复制，如拷贝构造函数、移动构造函数、拷贝赋值运算符和移动赋值运算符等。这些函数可以确保在内存复制时正确地处理非POD类型的数据，避免数据混乱等问题。总之，“non-trivially-copyable type”是指不符合POD类型定义的数据类型，需要特殊函数来进行内存复制，以确保数据的正确性。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cuda基础</title>
      <link href="/2023/09/09/cuda-ji-chu/"/>
      <url>/2023/09/09/cuda-ji-chu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
